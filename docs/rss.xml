<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Purple4pur's Canvas</title><link>https://purple4pur.github.io</link><description>YOLO everything.</description><copyright>Purple4pur's Canvas</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/49893724?v=4</url><title>avatar</title><link>https://purple4pur.github.io</link></image><lastBuildDate>Tue, 12 Nov 2024 16:59:15 +0000</lastBuildDate><managingEditor>Purple4pur's Canvas</managingEditor><ttl>60</ttl><webMaster>Purple4pur's Canvas</webMaster><item><title>H△G 1st Live in Guangzhou 参战小记</title><link>https://purple4pur.github.io/post/H%E2%96%B3G%201st%20Live%20in%20Guangzhou%20-can-zhan-xiao-ji.html</link><description>### 我和 H△G&#13;
&#13;
我最早对 H△G 有印象最早应该是在 osu! 里听到了他们的《カラフル》，但也并没有特别关注，处于一个听日音相当杂食的状态。</description><guid isPermaLink="true">https://purple4pur.github.io/post/H%E2%96%B3G%201st%20Live%20in%20Guangzhou%20-can-zhan-xiao-ji.html</guid><pubDate>Tue, 12 Nov 2024 16:58:47 +0000</pubDate></item><item><title>避免沟通漏斗，传递完整的信息</title><link>https://purple4pur.github.io/post/bi-mian-gou-tong-lou-dou-%EF%BC%8C-chuan-di-wan-zheng-de-xin-xi.html</link><description>### 何谓「漏斗」&#13;
&#13;
「沟通漏斗」是一个很形象的概念，形容这样一种场景：A 把一件事告诉给 B，但由于双方的理解偏差或其他原因，导致 B 只接收到 80% 的原意，同样的事情继续发生在 B 告诉 C、C 告诉 D 上，结果整个沟通链上这件事的原意损失得越来越多，如同一个漏斗般。</description><guid isPermaLink="true">https://purple4pur.github.io/post/bi-mian-gou-tong-lou-dou-%EF%BC%8C-chuan-di-wan-zheng-de-xin-xi.html</guid><pubDate>Sat, 09 Nov 2024 05:42:48 +0000</pubDate></item><item><title>AXI4 Address Break Down</title><link>https://purple4pur.github.io/post/AXI4%20Address%20Break%20Down.html</link><description>### Must know&#13;
&#13;
- Unit of address is **Byte**.&#13;
    - 0x00 maps to a 1-byte space in memory.&#13;
    - 0x01 maps to the next byte.&#13;
- **Aligned address** means `Address % Size == 0`.&#13;
    - where `Size` is num of bytes per transfer: `2 ** AxSIZE` or `1 &lt;&lt; AxSIZE`.&#13;
- **Narrow transfer** means a transfer not using all *WDATA* bytes, but selected by *WSTRB*.&#13;
- *WSTRB* valid bits should match `Size`.&#13;
&#13;
### Schematic diagram&#13;
&#13;
What an AXI address in memory looks like:&#13;
&#13;
- *xDATA* width: 32 bits&#13;
&#13;
```&#13;
       Bit# |31    24|23    16|15     8|7      0|&#13;
            +--------+--------+--------+--------+&#13;
AXI Address |  0x03  |  0x02  |  0x01  |  0x00  |&#13;
            +--------+--------+--------+--------+&#13;
            |  0x07  |  0x06  |  0x05  |  0x04  |&#13;
            +--------+--------+--------+--------+&#13;
            |                              ...  |&#13;
            +-----------------------------------+&#13;
```&#13;
&#13;
### Calculation of burst INCR addresses&#13;
&#13;
&gt; Reference: AXI Spec $$A4.1.6&#13;
&#13;
A burst INCR request can start from an **aligned address** or **unaligned address**. For both cases, the 2nd address is always the next aligned address. Each transfer will step forward 1 `Size` space, making the whole burst INCR request write to or read from a consecutive memory space.&#13;
&#13;
- Example function to calculate the start address of the Nth transfer (Nth starts from 1):&#13;
&#13;
```systemverilog&#13;
function AXI_Address calc_Nth_start_addr(AXI_Address start_addr, int axsize, int Nth);&#13;
    int size = 2 ** axsize; // num of bytes per transfer&#13;
    AXI_Address aligned_addr = start_addr / size * size; // round down to aligned address&#13;
    // Nth starts from 1&#13;
    AXI_Address Nth_start_addr = (Nth == 1) ? (start_addr)                      :&#13;
                                              (aligned_addr + (Nth - 1) * size) ;&#13;
    return Nth_start_addr;&#13;
endfunction&#13;
```&#13;
&#13;
- Example function to calculate the last address of the whole burst INCR request:&#13;
&#13;
```systemverilog&#13;
function AXI_Address calc_end_addr(AXI_Address start_addr, int axsize, int axlen);&#13;
    int total_len = axlen + 1;&#13;
    int size = 2 ** axsize; // num of bytes per transfer&#13;
    AXI_Address aligned_addr = start_addr / size * size; // round down to aligned address&#13;
    AXI_Address end_addr = aligned_addr + total_len * size - 1;&#13;
    return end_addr;&#13;
endfunction&#13;
```&#13;
&#13;
### 4K boundary&#13;
&#13;
*4K* basically refers to a 4K-Byte space in memory, which is also called a *Page*. In AXI it means a 4096 (0x1000) wide address space. An AXI request is not allowed to cross the addresses that start a new *Page*. In other words, all accessed address should only be within one *Page*, E.g. `[0x3000, 0x3FFF]`.&#13;
&#13;
- Example function to check if an address space has crossed 4K boundary:&#13;
&#13;
```systemverilog&#13;
function bit has_crossed_4k_boundary(AXI_Address start_addr, AXI_Address end_addr);&#13;
    return ((start_addr &gt;&gt; 12) != (end_addr &gt;&gt; 12));&#13;
endfunction&#13;
```。</description><guid isPermaLink="true">https://purple4pur.github.io/post/AXI4%20Address%20Break%20Down.html</guid><pubDate>Fri, 08 Nov 2024 10:00:46 +0000</pubDate></item><item><title>Example Git Config File</title><link>https://purple4pur.github.io/post/Example%20Git%20Config%20File.html</link><description>## File Path&#13;
&#13;
* Linux: `~/.gitconfig`&#13;
* Windows: `C:/Users/&lt;user&gt;/.gitconfig`&#13;
&#13;
## Example&#13;
&#13;
```&#13;
[user]&#13;
    email = xxx@yyy.zzz&#13;
    name = xxx&#13;
[http]&#13;
    proxy = 127.0.0.1:10809&#13;
[core]&#13;
    editor = nvim&#13;
    pager = moar&#13;
[color]&#13;
    ui = auto&#13;
[diff]&#13;
    tool = meld&#13;
```&#13;
&#13;
## CLI Command&#13;
&#13;
```sh&#13;
git config --global --list&#13;
           --local  --get&#13;
                    --set   user.email 'xxx@yyy.zzz'&#13;
                    --unset&#13;
```。</description><guid isPermaLink="true">https://purple4pur.github.io/post/Example%20Git%20Config%20File.html</guid><pubDate>Tue, 05 Nov 2024 14:57:56 +0000</pubDate></item><item><title>2024 年各类 Live 及展会参战记录</title><link>https://purple4pur.github.io/post/2024%20-nian-ge-lei-%20Live%20-ji-zhan-hui-can-zhan-ji-lu.html</link><description>&gt; WIP&#13;
&#13;
### Live&#13;
&#13;
| No. | 日期  | Live                                           | 场地      | 主题     | 城市 | 票价       |&#13;
| --- | ---   | ---                                            | ---       | ---      | ---  | ---        |&#13;
| 1   | 6/10  | STARLINK METEOR 1st Live                       | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 2   | 6/22  | 「多厨狂喜」白金交响乐团二次元交响音乐会       | 音乐厅    | ACG 交响 | 上海 | 288        |&#13;
| 3   | 6/23  | 花之礼赞《奏响吧，和音社！》经典动漫交响音乐会 | 音乐厅    | ACG 交响 | 上海 | 180        |&#13;
| 4   | 6/30  | Star2U Macro Idol Festival Vol.14              | Livehouse | 地偶     | 上海 | 128        |&#13;
| 5   | 7/12  | 「夜³歌症候群」三夜 Only                       | Livehouse | ACG 摇滚 | 上海 | 99         |&#13;
| 6   | 7/20  | CrossingX意次元 音乐番 Only                    | Livehouse | ACG 摇滚 | 上海 | 78         |&#13;
| 7   | 7/21  | Star2U 跨次元嘉年华 Vol.12.5 邦邦 Only         | Livehouse | ACG 摇滚 | 上海 | 108        |&#13;
| 8   | 7/26  | fhana China Live Tour 2024                     | Livehouse | 日音     | 上海 | 380        |&#13;
| 9   | 8/11  | 漫音季 2024 夏                                 | Livehouse | ACG 摇滚 | 上海 | 0 (中奖票) |&#13;
| 10  | 8/17  | 跨越国境的旋律 大和田雅洋x和音社交响吹奏音乐会 | 音乐厅    | ACG 交响 | 上海 | 232        |&#13;
| 11  | 8/18  | 幻奏盛宴 2024 上海场                           | 音乐厅    | ACG 交响 | 上海 | 289        |&#13;
| 12  | 8/24  | 《不眨眼》HAG 1st Live in Shanghai             | Livehouse | 日音     | 上海 | 480        |&#13;
| 13  | 9/7   | 和音社录制现场旁听 (原演出取消)                | 音乐厅    | ACG 交响 | 上海 | 0 (补偿)   |&#13;
| 14  | 9/8   | Tie-Up Anirock Live 2.0                        | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 15  | 10/7  | 极光纪 Polar Ray 5th                           | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 16  | 10/12 | 《次元共鸣》ACG 乐队番主题演唱会               | Livehouse | ACG 摇滚 | 上海 | 160        |&#13;
| 17  | 11/3  | 「多厨狂喜」白金交响乐团二次元交响音乐会       | 音乐厅    | ACG 交响 | 上海 | 288        |&#13;
| 18  | 11/10 | 「声」HAG 1st Live in Guangzhou                | Livehouse | 日音     | 广州 | 480        |&#13;
| 19  | 11/16 | milet Asia Tour 2024                           | 演艺馆    | 日音     | 上海 | 880        |&#13;
| 20  | 11/24 | 泽野弘之 LIVE [nZk] 2024                       | 体育馆    | 日音     | 上海 | 880        |&#13;
| 21  | 12/14 | 玖玖的奇妙冒险 帝玖管弦乐团 2024 交响音乐会    | 音乐厅    | ACG 交响 | 上海 | 580        |&#13;
| 22  | 12/15 | 「旧友 \| 新声」陈致逸作品音乐会 2024          | 剧场      | ???      | 上海 | 480        |&#13;
&#13;
### 展会&#13;
&#13;
| No. | 日期  | 展会                             | 城市 | 票价 |&#13;
| --- | ---   | ---                              | ---  | ---  |&#13;
| 1   | 7/27  | Chinajoy 2024                    | 上海 | 188  |&#13;
| 2   | 11/30 | 创作连锁 2024 日厂 Vocaloid Only | 上海 | 139  |。</description><guid isPermaLink="true">https://purple4pur.github.io/post/2024%20-nian-ge-lei-%20Live%20-ji-zhan-hui-can-zhan-ji-lu.html</guid><pubDate>Sun, 03 Nov 2024 14:27:38 +0000</pubDate></item><item><title>A Practical Guide to Git Submodule</title><link>https://purple4pur.github.io/post/A%20Practical%20Guide%20to%20Git%20Submodule.html</link><description>## Clone a Repository With Its Submodules&#13;
&#13;
If is a first-time clone:&#13;
&#13;
```bash&#13;
git clone --recursive &lt;...&gt;&#13;
```&#13;
&#13;
If is an existing repository:&#13;
&#13;
```bash&#13;
git submodule update --init&#13;
```&#13;
&#13;
## Add a Submodule&#13;
&#13;
```bash&#13;
git submodule add &lt;repo_url&gt; [&lt;path&gt;]&#13;
```&#13;
&#13;
Running this command will:&#13;
&#13;
* clone `&lt;repo_url&gt;` into `&lt;path&gt;` , but separate its `.git` folder (see &lt;ins&gt;Change Settings of Submodules&lt;/ins&gt;)&#13;
* add submodule infomation into `.gitmodules`&#13;
* register submodule in `.git/modules/path/to/submodule` (where the `.git` folder is actually in)&#13;
* register submodule in `.git/config` (do a `git submodule init` )&#13;
* stage `.gitmodules` and the submodule folder&#13;
&#13;
This clone will be a very full clone, which means not so many configs can play a role.&#13;
&#13;
## Pull Upstream Changes&#13;
&#13;
Two ways:&#13;
&#13;
* `git submodule update --remote [&lt;path&gt;]`&#13;
* OR: `git pull` in the submodule&#13;
&#13;
Pulling upstream will also update the recorded hashes. Don't forget to commit changes.&#13;
&#13;
## Change Settings of Submodules&#13;
&#13;
There're two paths available:&#13;
&#13;
* `/path/to/submodule` (recommended)&#13;
* `.git/modules/path/to/submodule` (the actual path of the `.git` folder)&#13;
&#13;
Change working directory into one of them, then any git commands will apply to the submodule. For the first path, if is not been cloned, commands would still apply to the top-level repository. It is recommended to open a new terminal tab/window for changes within a submodule.&#13;
&#13;
What can do in a submodule:&#13;
&#13;
* pull upstream changes&#13;
* setup [sparse checkout](https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html) (not that practical)&#13;
&#13;
What can NOT do (or not be recommended) in a submodule:&#13;
&#13;
* change branch (see &lt;ins&gt;Change Tracking Branch&lt;/ins&gt;)&#13;
* change remote url (see &lt;ins&gt;Change Submodule URL&lt;/ins&gt;)&#13;
&#13;
## Change Tracking Branch&#13;
&#13;
A submodule can only be tracked with a **remote named branch**, not a hash, not a local branch.&#13;
&#13;
### 1. Update Branch Setting&#13;
&#13;
* `git submodule set-branch -b &lt;remote-branch&gt; &lt;module&gt;` (not recommended - verbose and easy to mismatch)&#13;
* OR: manually append `branch = &lt;remote-branch&gt;` below submodule's url in `.gitmodules`&#13;
&#13;
Warning: `&lt;module&gt;` must match the name in `.gitmodules` .&#13;
&#13;
If want to remove this setting (means to use the default branch):&#13;
&#13;
* `git submodule set-branch -d &lt;module&gt;` (not recommended)&#13;
* OR: manually remove the `branch = &lt;remote-branch&gt;` line&#13;
&#13;
### 2. Switch to the New Branch&#13;
&#13;
```bash&#13;
git submodule update --remote [&lt;path&gt;]&#13;
```&#13;
&#13;
This command will:&#13;
&#13;
1. do a `git pull; git checkout origin/&lt;remote-branch&gt;` in submodules&#13;
2. update recorded hash (checked with `status`. See &lt;ins&gt;`git submodule status`&lt;/ins&gt;)&#13;
&#13;
Don't forget to commit changes.&#13;
&#13;
## Change Submodule URL&#13;
&#13;
Mostly the same as &lt;ins&gt;Change Tracking Branch&lt;/ins&gt; , but change `url = &lt;URL&gt;` line instead.&#13;
&#13;
## Move a Submodule to a New Path&#13;
&#13;
```bash&#13;
git mv /path/to/submodule /new/path&#13;
```&#13;
&#13;
`git mv` handles everything.&#13;
&#13;
## Remove a Submodule From Current Repository&#13;
&#13;
1. `git submodule deinit /path/to/submodule` : unregister submodule from `.git/config`&#13;
2. remove `.git/modules/path/to/submodule` manually&#13;
3. `git rm /path/to/submodule` : remove submodule folder, unregister from `.gitmodules` and stage changes&#13;
&#13;
[Reference](https://stackoverflow.com/a/16162000/12509229)&#13;
&#13;
## Submodule Command Explanation&#13;
&#13;
[Full Documentation](https://git-scm.com/docs/git-submodule) | [Example Usage](https://git-scm.com/book/en/v2/Git-Tools-Submodules)&#13;
&#13;
### `git submodule -h`&#13;
&#13;
List all sub-commands.&#13;
&#13;
### `git submodule`&#13;
&#13;
Same as `git submodule status` without parameters.&#13;
&#13;
### `git submodule status`&#13;
&#13;
List all submodules with paths and **current hashes**. Hashes may have a prefix:&#13;
&#13;
* `-` : not initialized. An `init` or `update --init` is wanted&#13;
* `+` : currently checked out hash differs from the **recorded one**. An `update` is wanted&#13;
&#13;
### `git submodule add`&#13;
&#13;
Add a new submodule. See &lt;ins&gt;Add a Submodule&lt;/ins&gt; .&#13;
&#13;
### `git submodule init/deinit`&#13;
&#13;
(Un)register a submodule. 'Registered' means 'active'. `update` and other sub-commands will only apply to active submodules.&#13;
&#13;
### `git submodule update`&#13;
&#13;
Checkout the recorded hash of submodules. Some options:&#13;
&#13;
* `--init` : shorthand of `init` then `update`&#13;
* `--remote` : pull upstream and update recorded hashes. See &lt;ins&gt;Pull Upstream Changes&lt;/ins&gt;&#13;
* `--recursive` : `update` all nested submodules&#13;
&#13;
### `git submodule foreach &lt;command&gt;`&#13;
&#13;
Run `&lt;command&gt;` within each submodule. Example: `git submodule foreach git pull` .&#13;
。</description><guid isPermaLink="true">https://purple4pur.github.io/post/A%20Practical%20Guide%20to%20Git%20Submodule.html</guid><pubDate>Sat, 02 Nov 2024 07:06:15 +0000</pubDate></item><item><title>一种更平衡听歌和上分的 maimai 选歌策略</title><link>https://purple4pur.github.io/post/yi-zhong-geng-ping-heng-ting-ge-he-shang-fen-de-%20maimai%20-xuan-ge-ce-lve.html</link><description>我打 maimai 的背景情况是不太勤，很多歌都尚无成绩，同时又还有些上分空间。</description><guid isPermaLink="true">https://purple4pur.github.io/post/yi-zhong-geng-ping-heng-ting-ge-he-shang-fen-de-%20maimai%20-xuan-ge-ce-lve.html</guid><pubDate>Thu, 31 Oct 2024 15:46:28 +0000</pubDate></item><item><title>ROG Falchion(魔导士) RX Low Profile 键盘使用体验</title><link>https://purple4pur.github.io/post/ROG%20Falchion%28-mo-dao-shi-%29%20RX%20Low%20Profile%20-jian-pan-shi-yong-ti-yan.html</link><description>双十一于京东购入，实付 1179 元，于 10 月 15 日晚上拿到手，持续使用至本文发布时（约两周）。</description><guid isPermaLink="true">https://purple4pur.github.io/post/ROG%20Falchion%28-mo-dao-shi-%29%20RX%20Low%20Profile%20-jian-pan-shi-yong-ti-yan.html</guid><pubDate>Mon, 28 Oct 2024 17:29:41 +0000</pubDate></item><item><title>Git Sparse Checkout</title><link>https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html</link><description>## What Is Sparse Checkout?&#13;
&#13;
Checkout only part of the entire repository. Focus on files you need.&#13;
&#13;
Keep in mind: sparse-checkout settings are only kept in local copy. Won't be pushed. Won't be cloned.&#13;
&#13;
## Enable/Set/Add&#13;
&#13;
```bash&#13;
git sparse-checkout set/add [--no-cone] &lt;file(s)&gt;&#13;
```&#13;
&#13;
* `set` : re-write current settings&#13;
* `add` : append to current settings&#13;
&#13;
Running this will automatically enable sparse-checkout feature, which can be checked with `git config --list` .&#13;
&#13;
Internally, sparse-checkout maintains two files:&#13;
&#13;
1. `.git/config` , where stores the feature ON/OFF flags&#13;
2. `.git/info/sparse-checkout` . This file has a format the same as `.gitignore` but plays a **whitelist** role , and is the one `set/add` write to.&#13;
&#13;
Alternatively, the user can edit `.git/info/sparse-checkout` manually. (See also: &lt;ins&gt;`--cone` (default flag) vs `--no-cone`&lt;/ins&gt;)&#13;
&#13;
## List Current Settings&#13;
&#13;
```bash&#13;
git sparse-checkout list&#13;
```&#13;
&#13;
## Disable/Re-enable&#13;
&#13;
### Disable&#13;
&#13;
```bash&#13;
git sparse-checkout disable&#13;
```&#13;
&#13;
: turn off all sparse-checkout flags in `.git/config` , but not touch `.git/info/sparse-checkout` .&#13;
&#13;
### Re-enable&#13;
&#13;
```bash&#13;
git sparse-checkout add # no files here&#13;
```&#13;
&#13;
: turn on flags, continue using current `.git/info/sparse-checkout` .&#13;
&#13;
## `--cone` (default flag) vs `--no-cone`&#13;
&#13;
`--cone` is more like a 'smart' mode:&#13;
&#13;
* It automatically add `/*` and `!/*/` to `.git/info/sparse-checkout` (which means it **always allows top-level files** such as `/README.md` . It is impossible to filter them out.)&#13;
* When `set/add` , for example, passing `lua` will become a `/lua/` line in `.git/info/sparse-checkout`&#13;
&#13;
`--no-cone` is somewhat 'manual' mode:&#13;
&#13;
* When `set/add` , `&lt;file(s)&gt;` will be written into `.git/info/sparse-checkout` character by character.&#13;
&#13;
In this mode, the user can filter anything without any restriction. But to remember: always set a path with a leading `/` like this: `git sparse-checkout add /README.md /lua /doc` .&#13;
&#13;
If you have been aware of all of above, I suggest `--no-cone` mode, which is more flexible. [An official discussion here](https://git-scm.com/docs/git-sparse-checkout#_internalsnon_cone_problems) .&#13;
&#13;
## Extra: Start From a Minimal Clone&#13;
&#13;
```bash&#13;
git clone --filter=blob:none --no-checkout &lt;URL&gt; [&lt;...&gt;]&#13;
git sparse-checkout set [&lt;...&gt;]&#13;
git checkout&#13;
```&#13;
&#13;
[Reference](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/#sparse-checkout-and-partial-clones)。</description><guid isPermaLink="true">https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html</guid><pubDate>Sat, 26 Oct 2024 15:17:05 +0000</pubDate></item><item><title>爱好是一种能让自己开心的习惯</title><link>https://purple4pur.github.io/post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</link><description>最近在回想我的爱好，在过去的十年里其实改变了不少。</description><guid isPermaLink="true">https://purple4pur.github.io/post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</guid><pubDate>Fri, 25 Oct 2024 09:35:28 +0000</pubDate></item><item><title>vcs/verdi Cheat Sheet</title><link>https://purple4pur.github.io/post/vcs-verdi%20Cheat%20Sheet.html</link><description>## vcs&#13;
&#13;
```bash&#13;
-full64 +v2k -sverilog              # 固定起手（v2k 指 Verilog-2001）&#13;
-lca -debug_access+all -kdb         # 保存波形需要，debug 开关极大影响仿真时间[1][2]&#13;
-timescale=1ns/100ps                # 时间精度，考虑在这里统一指定&#13;
-ntb_opts uvm-1.1                   # UVM&#13;
+incdir+&lt;XX_DIR&gt; &lt;XX_file&gt;          # rtl、verif 文件&#13;
+define+&lt;XX&gt; +define+&lt;XX&gt;=&lt;YY&gt;      # 设置 define&#13;
+vcs+fsdbon                         # 自动生成波形文件（novas.fsdb）&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt;   # 统计覆盖率[3][4]&#13;
-fgp                                # 启用多线程仿真支持[5]&#13;
-j&lt;NUM&gt;                             # 多线程编译，实测对编译速度可能几乎无提升&#13;
-R [simv_options]                   # 编译后自动开始仿真&#13;
```&#13;
&#13;
## simv&#13;
&#13;
```bash&#13;
+UVM_TESTNAME=&lt;TEST&gt;                # 指定 run_test() 调用的 uvm_test&#13;
+ntb_random_seed=&lt;SEED&gt;             # 随机数种子，用于 random()、randomize() 等&#13;
-ucli -i &lt;UCLI_FILE&gt;                # 灵活控制是否生成波形&#13;
+fsdb+delta                         # 记录 delta time，能在 verdi 里展开&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt; -cm_name &lt;TEST&gt;&#13;
                                    # 统计覆盖率[3][4]&#13;
+UVM_TR_RECORD +UVM_LOG_RECORD +UVM_VERDI_TRACE&#13;
                                    # UVM debug 开关，能在 verdi 里可视化 transaction&#13;
+UVM_VERBOSITY=&lt;VERBOSITY&gt;          # 灵活调整 UVM 打印冗余级别&#13;
-fgp=num_threads:&lt;NUM&gt;,num_fsdb_threads:&lt;NUM&gt;,allow_less_cores -Xdprof=timeline&#13;
                                    # 多线程仿真[5]，实测对仿真速度可能几乎无提升&#13;
```&#13;
&#13;
### &lt;UCLI_FILE&gt;&#13;
&#13;
```bash&#13;
fsdbDumpvars 0                      # 生成所有波形，默认文件名为 novas.fsdb，极大影响仿真时间[1]&#13;
run&#13;
quit&#13;
```&#13;
&#13;
## verdi&#13;
&#13;
```bash&#13;
-dbdir simv.daidir                  # 加载代码&#13;
-ssf novas.fsdb                     # 加载波形，如果存在关联的代码也会自动加载（即省略 -dbdir）&#13;
-cov -covdir &lt;cov.vdb&gt;              # 打开 vdCoverage 窗口，并加载覆盖率信息&#13;
```&#13;
&#13;
* `&lt;Shift+滚轮&gt;`：前后平移波形&#13;
* `双击波形边沿`：在代码窗口中跳转到对应的激励&#13;
* `nWave-&gt;Tools-&gt;Transaction Debug-&gt;Transaction and Protocol Analyzer`：打开可视化 transaction 面板&#13;
* `tProtocolAnalyzer-&gt;View-&gt;Sync. With nWave`：关联上下两个面板（波形、transaction）&#13;
* `Tools-&gt;Coverage`：打开 vdCoverage 窗口&#13;
* `vdCoverage-&gt;Tools-&gt;Generate URG Report`：生成覆盖率报告&#13;
&#13;
## Reference&#13;
&#13;
[1] [vcs中debug选项、波形dump对仿真时间的影响_kevindas的博客-CSDN博客](https://blog.csdn.net/kevindas/article/details/107307654)&#13;
[2] [Synopsys VCS 编译时，启用debug选项_XtremeDV的博客-CSDN博客](https://blog.csdn.net/zhajio/article/details/88839838)&#13;
[3] [vcs覆盖率选项_weixin_39662684的博客-CSDN博客](https://blog.csdn.net/weixin_39662684/article/details/108255556)&#13;
[4] [VCS覆盖率使用详解（基础、合并、查看、分析） - 知乎](https://zhuanlan.zhihu.com/p/620471082)&#13;
[5] [VCS -- fgp 仿真加速 - Thisway2014 - 博客园](https://www.cnblogs.com/thisway2014/p/16783601.html)。</description><guid isPermaLink="true">https://purple4pur.github.io/post/vcs-verdi%20Cheat%20Sheet.html</guid><pubDate>Thu, 24 Oct 2024 16:04:25 +0000</pubDate></item><item><title>Hello Gmeek!</title><link>https://purple4pur.github.io/post/Hello%20Gmeek%21.html</link><description>Hello Gmeek, welcome back my blog!&#13;
&#13;
I knew this project from V2EX months ago and thinking wow that is exactly what I want: a simple enough place to write down anything without handling deployment, page style, server, etc. Now it's here.&#13;
&#13;
See you soon in the next coming post.。</description><guid isPermaLink="true">https://purple4pur.github.io/post/Hello%20Gmeek%21.html</guid><pubDate>Wed, 23 Oct 2024 15:32:56 +0000</pubDate></item></channel></rss>