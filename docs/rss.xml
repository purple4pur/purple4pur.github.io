<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Purple4pur's Canvas</title><link>https://purple4pur.github.io</link><description>YOLO everything.</description><copyright>Purple4pur's Canvas</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/49893724?v=4</url><title>avatar</title><link>https://purple4pur.github.io</link></image><lastBuildDate>Sat, 26 Oct 2024 15:19:02 +0000</lastBuildDate><managingEditor>Purple4pur's Canvas</managingEditor><ttl>60</ttl><webMaster>Purple4pur's Canvas</webMaster><item><title>Git Sparse Checkout</title><link>https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html</link><description>## What Is Sparse Checkout?&#13;
&#13;
Checkout only part of the entire repository. Focus on files you need.&#13;
&#13;
Keep in mind: sparse-checkout settings are only kept in local copy. Won't be pushed. Won't be cloned.&#13;
&#13;
## Enable/Set/Add&#13;
&#13;
```bash&#13;
git sparse-checkout set/add [--no-cone] &lt;file(s)&gt;&#13;
```&#13;
&#13;
* `set` : re-write current settings&#13;
* `add` : append to current settings&#13;
&#13;
Running this will automatically enable sparse-checkout feature, which can be checked with `git config --list` .&#13;
&#13;
Internally, sparse-checkout maintains two files:&#13;
&#13;
1. `.git/config` , where stores the feature ON/OFF flags&#13;
2. `.git/info/sparse-checkout` . This file has a format the same as `.gitignore` but plays a **whitelist** role , and is the one `set/add` write to.&#13;
&#13;
Alternatively, the user can edit `.git/info/sparse-checkout` manually. (See also: &lt;ins&gt;`--cone` (default flag) vs `--no-cone`&lt;/ins&gt;)&#13;
&#13;
## List Current Settings&#13;
&#13;
```bash&#13;
git sparse-checkout list&#13;
```&#13;
&#13;
## Disable/Re-enable&#13;
&#13;
### Disable&#13;
&#13;
```bash&#13;
git sparse-checkout disable&#13;
```&#13;
&#13;
: turn off all sparse-checkout flags in `.git/config` , but not touch `.git/info/sparse-checkout` .&#13;
&#13;
### Re-enable&#13;
&#13;
```bash&#13;
git sparse-checkout add # no files here&#13;
```&#13;
&#13;
: turn on flags, continue using current `.git/info/sparse-checkout` .&#13;
&#13;
## `--cone` (default flag) vs `--no-cone`&#13;
&#13;
`--cone` is more like a 'smart' mode:&#13;
&#13;
* It automatically add `/*` and `!/*/` to `.git/info/sparse-checkout` (which means it **always allows top-level files** such as `/README.md` . It is impossible to filter them out.)&#13;
* When `set/add` , for example, passing `lua` will become a `/lua/` line in `.git/info/sparse-checkout`&#13;
&#13;
`--no-cone` is somewhat 'manual' mode:&#13;
&#13;
* When `set/add` , `&lt;file(s)&gt;` will be written into `.git/info/sparse-checkout` character by character.&#13;
&#13;
In this mode, the user can filter anything without any restriction. But to remember: always set a path with a leading `/` like this: `git sparse-checkout add /README.md /lua /doc` .&#13;
&#13;
If you have been aware of all of above, I suggest `--no-cone` mode, which is more flexible. [An official discussion here](https://git-scm.com/docs/git-sparse-checkout#_internalsnon_cone_problems) .&#13;
&#13;
## Extra: Start From a Minimal Clone&#13;
&#13;
```bash&#13;
git clone --filter=blob:none --no-checkout &lt;URL&gt; [&lt;...&gt;]&#13;
git sparse-checkout set [&lt;...&gt;]&#13;
git checkout&#13;
```&#13;
&#13;
[Reference](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/#sparse-checkout-and-partial-clones)。</description><guid isPermaLink="true">https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html</guid><pubDate>Sat, 26 Oct 2024 15:17:05 +0000</pubDate></item><item><title>爱好是一种能让自己开心的习惯</title><link>https://purple4pur.github.io/post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</link><description>最近在回想我的爱好，在过去的十年里其实改变了不少。</description><guid isPermaLink="true">https://purple4pur.github.io/post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</guid><pubDate>Fri, 25 Oct 2024 09:35:28 +0000</pubDate></item><item><title>vcs/verdi Cheat Sheet</title><link>https://purple4pur.github.io/post/vcs-verdi%20Cheat%20Sheet.html</link><description>## vcs&#13;
&#13;
```bash&#13;
-full64 +v2k -sverilog              # 固定起手（v2k 指 Verilog-2001）&#13;
-lca -debug_access+all -kdb         # 保存波形需要，debug 开关极大影响仿真时间[1][2]&#13;
-timescale=1ns/100ps                # 时间精度，考虑在这里统一指定&#13;
-ntb_opts uvm-1.1                   # UVM&#13;
+incdir+&lt;XX_DIR&gt; &lt;XX_file&gt;          # rtl、verif 文件&#13;
+define+&lt;XX&gt; +define+&lt;XX&gt;=&lt;YY&gt;      # 设置 define&#13;
+vcs+fsdbon                         # 自动生成波形文件（novas.fsdb）&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt;   # 统计覆盖率[3][4]&#13;
-fgp                                # 启用多线程仿真支持[5]&#13;
-j&lt;NUM&gt;                             # 多线程编译，实测对编译速度可能几乎无提升&#13;
-R [simv_options]                   # 编译后自动开始仿真&#13;
```&#13;
&#13;
## simv&#13;
&#13;
```bash&#13;
+UVM_TESTNAME=&lt;TEST&gt;                # 指定 run_test() 调用的 uvm_test&#13;
+ntb_random_seed=&lt;SEED&gt;             # 随机数种子，用于 random()、randomize() 等&#13;
-ucli -i &lt;UCLI_FILE&gt;                # 灵活控制是否生成波形&#13;
+fsdb+delta                         # 记录 delta time，能在 verdi 里展开&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt; -cm_name &lt;TEST&gt;&#13;
                                    # 统计覆盖率[3][4]&#13;
+UVM_TR_RECORD +UVM_LOG_RECORD +UVM_VERDI_TRACE&#13;
                                    # UVM debug 开关，能在 verdi 里可视化 transaction&#13;
+UVM_VERBOSITY=&lt;VERBOSITY&gt;          # 灵活调整 UVM 打印冗余级别&#13;
-fgp=num_threads:&lt;NUM&gt;,num_fsdb_threads:&lt;NUM&gt;,allow_less_cores -Xdprof=timeline&#13;
                                    # 多线程仿真[5]，实测对仿真速度可能几乎无提升&#13;
```&#13;
&#13;
### &lt;UCLI_FILE&gt;&#13;
&#13;
```bash&#13;
fsdbDumpvars 0                      # 生成所有波形，默认文件名为 novas.fsdb，极大影响仿真时间[1]&#13;
run&#13;
quit&#13;
```&#13;
&#13;
## verdi&#13;
&#13;
```bash&#13;
-dbdir simv.daidir                  # 加载代码&#13;
-ssf novas.fsdb                     # 加载波形，如果存在关联的代码也会自动加载（即省略 -dbdir）&#13;
-cov -covdir &lt;cov.vdb&gt;              # 打开 vdCoverage 窗口，并加载覆盖率信息&#13;
```&#13;
&#13;
* `&lt;Shift+滚轮&gt;`：前后平移波形&#13;
* `双击波形边沿`：在代码窗口中跳转到对应的激励&#13;
* `nWave-&gt;Tools-&gt;Transaction Debug-&gt;Transaction and Protocol Analyzer`：打开可视化 transaction 面板&#13;
* `tProtocolAnalyzer-&gt;View-&gt;Sync. With nWave`：关联上下两个面板（波形、transaction）&#13;
* `Tools-&gt;Coverage`：打开 vdCoverage 窗口&#13;
* `vdCoverage-&gt;Tools-&gt;Generate URG Report`：生成覆盖率报告&#13;
&#13;
## Reference&#13;
&#13;
[1] [vcs中debug选项、波形dump对仿真时间的影响_kevindas的博客-CSDN博客](https://blog.csdn.net/kevindas/article/details/107307654)&#13;
[2] [Synopsys VCS 编译时，启用debug选项_XtremeDV的博客-CSDN博客](https://blog.csdn.net/zhajio/article/details/88839838)&#13;
[3] [vcs覆盖率选项_weixin_39662684的博客-CSDN博客](https://blog.csdn.net/weixin_39662684/article/details/108255556)&#13;
[4] [VCS覆盖率使用详解（基础、合并、查看、分析） - 知乎](https://zhuanlan.zhihu.com/p/620471082)&#13;
[5] [VCS -- fgp 仿真加速 - Thisway2014 - 博客园](https://www.cnblogs.com/thisway2014/p/16783601.html)。</description><guid isPermaLink="true">https://purple4pur.github.io/post/vcs-verdi%20Cheat%20Sheet.html</guid><pubDate>Thu, 24 Oct 2024 16:04:25 +0000</pubDate></item><item><title>Hello Gmeek!</title><link>https://purple4pur.github.io/post/Hello%20Gmeek%21.html</link><description>Hello Gmeek, welcome back my blog!&#13;
&#13;
I knew this project from V2EX months ago and thinking wow that is exactly what I want: a simple enough place to write down anything without handling deployment, page style, server, etc. Now it's here.&#13;
&#13;
See you soon in the next coming post.。</description><guid isPermaLink="true">https://purple4pur.github.io/post/Hello%20Gmeek%21.html</guid><pubDate>Wed, 23 Oct 2024 15:32:56 +0000</pubDate></item></channel></rss>