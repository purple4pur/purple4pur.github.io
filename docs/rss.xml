<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Purple4pur's Canvas: the Blog</title><link>https://blog.quitw.org/</link><description>Make it simple. Keep it simple.</description><copyright>Purple4pur's Canvas: the Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/49893724</url><title>avatar</title><link>https://blog.quitw.org/</link></image><lastBuildDate>Fri, 13 Dec 2024 17:51:41 +0000</lastBuildDate><managingEditor>Purple4pur's Canvas: the Blog</managingEditor><ttl>60</ttl><webMaster>Purple4pur's Canvas: the Blog</webMaster><item><title>Blog Deployment Automation: ONE Post, TWO Sites</title><link>https://blog.quitw.org//post/Blog%20Deployment%20Automation-%20ONE%20Post%2C%20TWO%20Sites.html</link><description>### Background&#13;
&#13;
Before this post, I was hosting this blog on github.io only, which is quite enough for internet access. But GitHub and github.io are facing connection issues in mainland China these days. What I'm trying to achieve is to deploy the blog to my server as well, which provides relatively easy access for viewers in China, and a customized URL.&#13;
&#13;
This post shows the full view of my completely automated workflow of deploying this blog to two sites, along with detailed per step descriptions.&#13;
&#13;
### Workflow: the full view&#13;
&#13;
```&#13;
                 GitHub&#13;
+---------------------------------------+&#13;
|      +--------------------------+     |&#13;
|      | [A] write posts in Issue |     |&#13;
|      +-------------|------------+     |&#13;
|                    |                  |&#13;
|         +----------v----------+       |&#13;
| +-------- [B] generate &amp; push |       |&#13;
| |       |  (GitHub Actions)   |       |&#13;
| |       +----------|----------+       |&#13;
| |                  |                  |&#13;
| |     +------------v------------+     |&#13;
| |     | [C] deploy to github.io &lt;------- internet access&#13;
| |     |    (GitHub Actions)     |     |&#13;
| |     +------------|------------+     |&#13;
| |                  |                  |                    My Server&#13;
| | +----------------v----------------+ |             +---------------------+&#13;
| | | [D] request server side pulling | |   REST API  | +-----------------+ |&#13;
| | |        (GitHub Actions)         ------------------&gt;                 | |&#13;
| | +---------------------------------+ |             | | [E] task runner | |&#13;
| |   git push                          |   git pull  | |   (OliveTin)    | |&#13;
| +------------&gt;[blog repo]&lt;-----------------------------                 | |&#13;
|                    |                  |             | +--------|--------+ |&#13;
|                    |                  | new commits |          v          |&#13;
|                    +-------------------------------------&gt;[blog repo]     |&#13;
+---------------------------------------+             |          |          |&#13;
                                                      | +--------v-------+  |&#13;
                                                      | | [F] web server &lt;---- internet access&#13;
                                                      | |    (nginx)     |  |&#13;
                                                      | +----------------+  |&#13;
                                                      +---------------------+&#13;
```&#13;
&#13;
### Step [A], [B] and [C]&#13;
&#13;
These steps are all in help with or provided by [Gmeek](https://github.com/Meekdai/Gmeek) , the GitHub-based blog tool (Shout-out to this really amazing tool!).&#13;
&#13;
When I open or edit an issue, Gmeek will check if it's a valid issue for a blog post, then generate the corresponding static web files, push changes to current repository, finally deploy to GitHub page (github.io).&#13;
&#13;
After that, &lt;https://purple4pur.github.io/&gt; is ready for internet access. Here is where the previous flow ends.&#13;
&#13;
Check [`Gmeek.yml`](https://github.com/purple4pur/purple4pur.github.io/blob/main/.github/workflows/Gmeek.yml) for details.&#13;
&#13;
### Step [D]&#13;
&#13;
To automatically update the blog in remote, I add a new GitHub Actions workflow right after when [C] completes. In this workflow a POST request will be sent to the task runner hosted on my server, telling it to do a git pull on the server side, then check the command result returned from the server.&#13;
&#13;
Check [`pull_from_server.yaml`](https://github.com/purple4pur/purple4pur.github.io/blob/main/.github/workflows/pull_from_server.yaml) for details.&#13;
&#13;
### Step [E]&#13;
&#13;
Here is a task runner ([OliveTin](https://github.com/OliveTin/OliveTin)) that can run any predefined commands, with REST API provided. I have prepared a git work directory and a git pull command for it. So when this task is triggered, the local blog repository will fetch all changes from GitHub.&#13;
&#13;
### Step [F]&#13;
&#13;
A nginx server is hosting the local blog repo to provide internet access. What I didn't mention is the OliveTin instance and the nginx instance are all running in docker. So the tricky part here is they share a common volume to update or access the local repository.&#13;
&#13;
Check [docker compose file](https://github.com/purple4pur/docker_compose/tree/master/blog) for details.&#13;
&#13;
### Conclusion&#13;
&#13;
This a my first time to try to connect all these services to do sequential jobs in such a workflow, and the results please me so well. Docker and the router Traefik actually make them much simpler and portable. I'm happy to take all-in-docker and continually having more fun with it.。</description><guid isPermaLink="true">https://blog.quitw.org//post/Blog%20Deployment%20Automation-%20ONE%20Post%2C%20TWO%20Sites.html</guid><pubDate>Thu, 12 Dec 2024 14:28:42 +0000</pubDate></item><item><title>Traefik Config Snippets</title><link>https://blog.quitw.org//post/Traefik%20Config%20Snippets.html</link><description>&gt; Apply to `traefik:v3.2`&#13;
&#13;
### Example traefik `compose.yaml`&#13;
&#13;
See [[TBD]](#) .&#13;
&#13;
### Example `traefik.yaml`&#13;
&#13;
```yaml&#13;
log:&#13;
  level: 'WARN'&#13;
api:&#13;
  dashboard: true&#13;
providers:&#13;
  docker:&#13;
    endpoint: 'unix:///var/run/docker.sock'&#13;
    exposedbydefault: false&#13;
entryPoints:&#13;
  web:&#13;
    address: ':80'&#13;
  websecure:&#13;
    address: ':443'&#13;
certificatesResolvers:&#13;
  cloudflare:&#13;
    acme:&#13;
      email: 'email@example.com'&#13;
      storage: '/letsencrypt/acme_cloudflare.json'&#13;
      dnsChallenge:&#13;
        provider: 'cloudflare'&#13;
        resolvers:&#13;
          - '8.8.8.8:53'&#13;
          - '1.1.1.1:53'&#13;
  myresolver:&#13;
    acme:&#13;
      email: 'email@example.com'&#13;
      storage: '/letsencrypt/acme.json'&#13;
      httpChallenge:&#13;
        entryPoint: 'web'&#13;
```&#13;
&#13;
### Route a https URL to an internal service on :8080&#13;
&#13;
```yaml&#13;
    ...&#13;
    labels:&#13;
      traefik.enable: true&#13;
      traefik.http.services.SERVICE_X.loadbalancer.server.port: '8080'&#13;
      traefik.http.routers.ROUTER_X.rule: '...'&#13;
      traefik.http.routers.ROUTER_X.entrypoints: 'websecure'&#13;
      traefik.http.routers.ROUTER_X.tls.certresolver: 'cloudflare'&#13;
      traefik.http.routers.ROUTER_X.service: 'SERVICE_X'&#13;
```&#13;
&#13;
### middleware: redirectregex&#13;
&#13;
Redirect `dashboard.hostname.com...` to `https://hostname.com/dashboard...`:&#13;
&#13;
```yaml&#13;
    ...&#13;
    labels:&#13;
      ...&#13;
      # define redirectregex&#13;
      traefik.http.middlewares.MIDDLEWARE_X.redirectregex.regex: '^(?:https?:\\/\\/)?dashboard\\.hostname\\.com(.*)'&#13;
      traefik.http.middlewares.MIDDLEWARE_X.redirectregex.replacement: 'https://hostname.com/dashboard$${1}'&#13;
      ...&#13;
      # use redirectregex&#13;
      traefik.http.routers.ROUTER_X.middlewares: 'MIDDLEWARE_X'&#13;
      traefik.http.routers.ROUTER_X.service: 'noop@internal' # avoid auto linking this middleware to other services&#13;
```&#13;
&#13;
### middleware: basicAuth&#13;
&#13;
```yaml&#13;
    ...&#13;
    labels:&#13;
      ...&#13;
      # define basicAuth&#13;
      traefik.http.middlewares.MIDDLEWARE_X.basicAuth.users: 'test:$apr1$7ij1g6q3$WiPOcMX6m/gWCC3kKP9kh0'&#13;
      ...&#13;
      # use basicAuth&#13;
      traefik.http.routers.ROUTER_X.middlewares: 'MIDDLEWARE_X'&#13;
```&#13;
&#13;
, where `users` field is Apache salted MD5 generated by `htpasswd`:&#13;
&#13;
```sh&#13;
htpasswd -n USERNAME&#13;
```。</description><guid isPermaLink="true">https://blog.quitw.org//post/Traefik%20Config%20Snippets.html</guid><pubDate>Wed, 11 Dec 2024 14:58:11 +0000</pubDate></item><item><title>Allow Non-superuser to Handle One's Application Container: Finding the Solution</title><link>https://blog.quitw.org//post/Allow%20Non-superuser%20to%20Handle%20One%27s%20Application%20Container-%20Finding%20the%20Solution.html</link><description>### Background&#13;
&#13;
A friend of mine is hosting a QQ bot ( [Miao-Yunzai](https://github.com/yoimiya-kokomi/Miao-Yunzai) ) on my VPS, and let's call him friendR here. Recently I'm switching the bot to my new VPS, and trying to host as much as possible services in docker in order to keep the host machine clean.&#13;
&#13;
After some experiments I can use my modified Dockerfile and compose file to invoke the bot in container as I want. The next challenge is to allow friendR to up/down the bot container and run `npm run app` in it, because he might restart the bot anytime he want and does not need my involvement.&#13;
&#13;
So my goals are:&#13;
&#13;
- **Security**: friendR should never be a superuser or in the docker group, or have any change to run arbitrary codes.&#13;
- **Independence**: friendR should independently up/down a specific container, or run specific commands in the container.&#13;
- **Volume run-through**: friendR should be able to modify bot related files bound into the container, easily.&#13;
&#13;
### Try#1: shell script w/ SUID&#13;
&#13;
With SUID bit one can run the executable as the owner. So my basic thinking is to place a simple shell script like `docker compose -f /path/to/compose.yaml up -d` into friendR's path, set its owner to superuser, and set file mode to `5750 (rwsr-x--T)`.&#13;
&#13;
But here are two problems. The greatest one is SUID bit will be ignored on shebang script, which means friendR still has no permission to call docker commands. The other one is also very critical to security, that is friendR can overwrite docker related files (Dockerfile, compose.yaml, etc.) because they are in his controlled directory.&#13;
&#13;
### Try#2: finite sudo permission&#13;
&#13;
I want to solve the permission issue first. I set the root owned `up.sh` to `0700 (rwx------)`, and allow friendR to sudo on this specific file (via `visudo`), so that he can call with `sudo ./up.sh`:&#13;
&#13;
```diff&#13;
+friendR ALL=(root) /path/to/up.sh&#13;
```&#13;
&#13;
Yeah it works, but the security issue is even more obvious: friendR can simply overwrite `up.sh` to run anything as superuser. That is crazy and is definitely not acceptable.&#13;
&#13;
A possible fix is to prepend the file hash to the file path in `sudoers`, while I think it's way too inflexible.&#13;
&#13;
### Try#3: binary command wrapper w/ SUID (This works!)&#13;
&#13;
During the research of Try#1, I noticed a [Stack Overflow answer](https://unix.stackexchange.com/a/369) saying that one may write a script wrapper to call the shell to grant other user the superuser permission.&#13;
&#13;
I tried the C programming and quickly found the first issue: `system()` is to start a new process to run the following command, but not using the euid (Effective UID, influenced by SUID). That means friendR will not have permissions to call docker commands when he invokes the compiled binary.&#13;
&#13;
I didn't dive deep into how `system()` works with UID, because later I found using `exec()` can get rid of this issue. `exec()` is to replace current process with its argument command, which inherits process' euid.&#13;
&#13;
In this way, I just copy the binaries to friendR's directory and set mode to `4750 (rwsr-x---)`, then friendR can call them to invoke hard-coded docker commands.&#13;
&#13;
### Bonus: complex commands wrapper workaround&#13;
&#13;
One thing I didn't mention in Try#3 is actually the euid mechanism failed when I called `./up.sh` or `bash ./up.sh` with `exec()`. Somehow it might be also a security guard.&#13;
&#13;
An enhancement to invoke `npm run app` in the container I want to achieve is to check if there's already a running process before starting the app. I wrote this check using shell script and finally realized I could hardly run the whole script in a single `exec()` calling.&#13;
&#13;
Before my giving up suddenly it hit me that it's way easier to do this check inside the container, instead of using `docker compose top` outside. So I just leave a script calling to `docker exec`, and finish the rest of jobs inside the container.&#13;
&#13;
```c&#13;
// run_app.c&#13;
execlp('docker', 'docker', 'compose', '-f', '/path/to/compose.yaml', 'exec', '-it', 'miao-yunzai', './run_app.sh', (char *)NULL);&#13;
```&#13;
&#13;
```bash&#13;
# run_app.sh&#13;
if [[ '$(ps -aux | grep 'npm run app' | grep -v grep)' != '' ]]; then&#13;
    echo 'app is already running! will not start a 2nd one.'&#13;
    exit 1&#13;
fi&#13;
echo '&gt; npm run app'&#13;
npm run app&#13;
```&#13;
&#13;
### Final solution&#13;
&#13;
To keep it secured, all the docker related files are placed in my directory. Bot needed files are placed in friendR's directory, and bound into the container.&#13;
&#13;
C docker wrappers and simple Makefile:&#13;
&#13;
```c&#13;
// up.c as an example&#13;
#include &lt;unistd.h&gt;&#13;
&#13;
int main() {&#13;
    execlp('docker', 'docker', 'compose', '-f', '/path/to/compose.yaml', 'up', '-d', (char *)NULL);&#13;
    return 0;&#13;
}&#13;
```&#13;
&#13;
```makefile&#13;
# Makefile&#13;
# usage: make -B&#13;
&#13;
all: $(patsubst %.c,%,$(wildcard *.c))&#13;
&#13;
%: %.c&#13;
	gcc $&lt; -o $@&#13;
	sudo cp $@ /home/friendR/Miao-Yunzai&#13;
	sudo chown root:friendR /home/friendR/Miao-Yunzai/$@&#13;
	sudo chmod 4750 /home/friendR/Miao-Yunzai/$@&#13;
```&#13;
&#13;
### Conclusion&#13;
&#13;
After a few days of work finally it's solved. Providing a command wrapper in binary seems the only safe way to support this kinda crazy goal: letting non-superuser to manipulate docker while keep any other thing non-privileged.&#13;
&#13;
It's hard to say this is a elegant solution but it works and, not too ugly I think? This can also be a useful reference whenever there's a similar scenario.。</description><guid isPermaLink="true">https://blog.quitw.org//post/Allow%20Non-superuser%20to%20Handle%20One%27s%20Application%20Container-%20Finding%20the%20Solution.html</guid><pubDate>Thu, 05 Dec 2024 08:42:00 +0000</pubDate></item><item><title>Linux File Permissions</title><link>https://blog.quitw.org//post/Linux%20File%20Permissions.html</link><description>### Quick reference&#13;
&#13;
```&#13;
| type | [u]ser  | [g]roup | [o]thers |&#13;
| ---- |  - - -  |  - - -  |  - - -   | # Regular permissions&#13;
|    - |  r      |  r      |  r       |   - can be read&#13;
|    - |    w    |    w    |    w     |   - can be modified&#13;
|    - |      x  |      x  |      x   |   - can be executed&#13;
|    d |  r      |  r      |  r       |   - contents can be shown&#13;
|    d |      x  |      x  |      x   |   - can be accessed with 'cd'&#13;
|    d |    w x  |    w x  |    w x   |   - contents can be modified&#13;
| ---- |  - - -  |  - - -  |  - - -   | # Special permissions&#13;
|  -/d |      s  |         |          |   - setuid w/ 'x'&#13;
|    - |      S  |         |          |   - setuid w/o 'x' (rare)&#13;
|    d |      S  |         |          |   - (useless)&#13;
|  -/d |         |      s  |          |   - setgid w/ 'x'&#13;
|    - |         |      S  |          |   - setgid w/o 'x' (rare)&#13;
|    d |         |      S  |          |   - (useless)&#13;
|  -/d |         |         |      t   |   - sticky w/ 'x'&#13;
|    - |         |         |      T   |   - sticky w/o 'x' (rare)&#13;
|    d |         |         |      T   |   - sticky w/o 'x'&#13;
```&#13;
&#13;
### Setuid (SUID)&#13;
&#13;
&gt; `stat = 4---`&#13;
&#13;
Would be executed **as the file owner**. Useless on shebang scripts (for safety).&#13;
&#13;
- **/usr/bin/passwd**: `-rwsr-xr-x root root`&#13;
&#13;
### Setgid (SGID)&#13;
&#13;
&gt; `stat = 2---`&#13;
&#13;
Files/Directories created within the folder or by the file will **have the same group ownership** as it, and inherit this SGID bit.&#13;
&#13;
### Sticky&#13;
&#13;
&gt; `stat = 1---`&#13;
&#13;
Not allowed to be removed.&#13;
&#13;
- **/tmp**: `drwxrwxrwt root root`&#13;
&#13;
### Appendix: links&#13;
&#13;
- [[File permissions and attributes - ArchWiki]](https://wiki.archlinux.org/title/File_permissions_and_attributes)&#13;
- [[setuid - Wikipedia]](https://en.wikipedia.org/wiki/Setuid)&#13;
- [[Sticky bit - Wikipedia]](https://en.wikipedia.org/wiki/Sticky_bit)。</description><guid isPermaLink="true">https://blog.quitw.org//post/Linux%20File%20Permissions.html</guid><pubDate>Thu, 21 Nov 2024 17:04:10 +0000</pubDate></item><item><title>Welcome, My New VPS!</title><link>https://blog.quitw.org//post/Welcome%2C%20My%20New%20VPS%21.html</link><description>### General info&#13;
&#13;
- Vendor: Tencent Cloud&#13;
- 地域和可用区: 东京 | 东京一区&#13;
- 套餐类型: 入门型&#13;
- 实例规格:&#13;
    - CPU - 2核&#13;
    - 内存 - 2GB&#13;
    - 系统盘 - SSD云硬盘 50GB&#13;
    - 流量包 - 1024GB/月（峰值带宽：30Mbps）&#13;
- Price: 99CNY for 1Yr&#13;
&#13;
### VPS all-in-one test&#13;
&#13;
&lt;https://github.com/spiritLHLS/ecs&gt;&#13;
&#13;
&lt;details&gt;&lt;summary&gt;Results&lt;/summary&gt;&#13;
&#13;
```&#13;
--------------------- A Bench Script By spiritlhl ----------------------&#13;
                   测评频道: https://t.me/vps_reviews&#13;
VPS融合怪版本：2024.11.08&#13;
Shell项目地址：https://github.com/spiritLHLS/ecs&#13;
Go项目地址：https://github.com/oneclickvirt/ecs&#13;
---------------------基础信息查询--感谢所有开源项目---------------------&#13;
 CPU 型号          : Intel(R) Xeon(R) Gold 6146 CPU @ 3.20GHz&#13;
 CPU 核心数        : 2&#13;
 CPU 频率          : 3192.500 MHz&#13;
 CPU 缓存          : L1: 64.00 KB / L2: 8.00 MB / L3: 27.50 MB&#13;
 AES-NI指令集      : ✔ Enabled&#13;
 VM-x/AMD-V支持    : ❌ Disabled&#13;
 内存              : 300.93 MiB / 1.80 GiB&#13;
 Swap              : [ no swap partition or swap file detected ]&#13;
 硬盘空间          : 2.24 GiB / 49.10 GiB&#13;
 启动盘路径        : /dev/vda1&#13;
 系统在线时间      : 0 days, 4 hour 51 min&#13;
 负载              : 0.50, 0.19, 0.08&#13;
 系统              : Debian GNU/Linux 12 (bookworm) (x86_64)&#13;
 架构              : x86_64 (64 Bit)&#13;
 内核              : 6.1.0-26-amd64&#13;
 TCP加速方式       : cubic&#13;
 虚拟化架构        : KVM&#13;
 NAT类型           : Port Restricted Cone&#13;
 IPV4 ASN          : AS132203 Tencent Building, Kejizhongyi Avenue&#13;
 IPV4 位置         : Tokyo / Tokyo / JP&#13;
----------------------CPU测试--通过sysbench测试-------------------------&#13;
 -&gt; CPU 测试中 (Fast Mode, 1-Pass @ 5sec)&#13;
 1 线程测试(单核)得分:          1022 Scores&#13;
 2 线程测试(多核)得分:          1975 Scores&#13;
---------------------内存测试--感谢lemonbench开源-----------------------&#13;
 -&gt; 内存测试 Test (Fast Mode, 1-Pass @ 5sec)&#13;
 单线程读测试:          22664.25 MB/s&#13;
 单线程写测试:          14543.86 MB/s&#13;
------------------磁盘dd读写测试--感谢lemonbench开源--------------------&#13;
 -&gt; 磁盘IO测试中 (4K Block/1M Block, Direct Mode)&#13;
 测试操作               写速度                                  读速度&#13;
 100MB-4K Block         4.8 MB/s (1171 IOPS, 21.85s)            10.5 MB/s (2553 IOPS, 10.03s)&#13;
 1GB-1M Block           127 MB/s (121 IOPS, 8.23s)              267 MB/s (254 IOPS, 3.93s)&#13;
---------------------磁盘fio读写测试--感谢yabs开源----------------------&#13;
Block Size | 4k            (IOPS) | 64k           (IOPS)&#13;
  ------   | ---            ----  | ----           ----&#13;
Read       | 65.65 MB/s   (16.4k) | 286.13 MB/s   (4.4k)&#13;
Write      | 65.79 MB/s   (16.4k) | 287.64 MB/s   (4.4k)&#13;
Total      | 131.45 MB/s  (32.8k) | 573.77 MB/s   (8.9k)&#13;
           |                      |&#13;
Block Size | 512k          (IOPS) | 1m            (IOPS)&#13;
  ------   | ---            ----  | ----           ----&#13;
Read       | 265.10 MB/s    (517) | 258.28 MB/s    (252)&#13;
Write      | 279.18 MB/s    (545) | 275.48 MB/s    (269)&#13;
Total      | 544.29 MB/s   (1.0k) | 533.76 MB/s    (521)&#13;
------------流媒体解锁--基于oneclickvirt/CommonMediaTests开源-----------&#13;
以下测试的解锁地区是准确的，但是不是完整解锁的判断可能有误，这方面仅作参考使用&#13;
----------------Netflix-----------------&#13;
[IPV4]&#13;
您的出口IP可以使用Netflix，但仅可看Netflix自制剧&#13;
NF所识别的IP地域信息：新加坡&#13;
[IPV6]&#13;
您的网络可能没有正常配置IPv6，或者没有IPv6网络接入&#13;
----------------Youtube-----------------&#13;
[IPV4]&#13;
连接方式: Youtube Video Server&#13;
视频缓存节点地域: 日本 东京(NRT12S24)&#13;
Youtube识别地域: 日本(JP)&#13;
[IPV6]&#13;
Youtube在您的出口IP所在的国家不提供服务&#13;
---------------DisneyPlus---------------&#13;
[IPV4]&#13;
当前出口所在地区解锁DisneyPlus&#13;
区域：JP 区&#13;
[IPV6]&#13;
DisneyPlus在您的出口IP所在的国家不提供服务&#13;
解锁Netflix，Youtube，DisneyPlus上面和下面进行比较，不同之处自行判断&#13;
----------------流媒体解锁--感谢RegionRestrictionCheck开源--------------&#13;
 以下为IPV4网络测试，若无IPV4网络则无输出&#13;
============[ Multination ]============&#13;
 Dazn:                                  Yes (Region: JP)&#13;
 Disney+:                               No (IP Banned By Disney+ 1)&#13;
 Netflix:                               Originals Only&#13;
 YouTube Premium:                       Yes (Region: JP)&#13;
 Amazon Prime Video:                    Yes (Region: JP)&#13;
 TVBAnywhere+:                          Yes&#13;
 Spotify Registration:                  Yes (Region: JP)&#13;
 Instagram Licensed Audio:              No&#13;
 OneTrust Region:                       JP [Tokyo]&#13;
 iQyi Oversea Region:                   JP&#13;
 Bing Region:                           JP&#13;
 YouTube CDN:                           Tokyo&#13;
 Netflix Preferred CDN:                 Tokyo&#13;
 ChatGPT:                               No (Only Available with Web Browser)&#13;
 Google Gemini:                         Yes (Region: JPN)&#13;
 Wikipedia Editability:                 No&#13;
 Google Search CAPTCHA Free:            Yes&#13;
 Steam Currency:                        JPY&#13;
 ---Forum---&#13;
 Reddit:                                No&#13;
=======================================&#13;
 以下为IPV6网络测试，若无IPV6网络则无输出&#13;
---------------TikTok解锁--感谢lmc999的源脚本及fscarmen PR--------------&#13;
 Tiktok Region:         【JP】&#13;
-------------IP质量检测--基于oneclickvirt/securityCheck使用-------------&#13;
数据仅作参考，不代表100%准确，如果和实际情况不一致请手动查询多个数据库比对&#13;
以下为各数据库编号，输出结果后将自带数据库来源对应的编号&#13;
ipinfo数据库  [0] | scamalytics数据库 [1] | virustotal数据库   [2] | abuseipdb数据库   [3] | ip2location数据库    [4]&#13;
ip-api数据库  [5] | ipwhois数据库     [6] | ipregistry数据库   [7] | ipdata数据库      [8] | db-ip数据库          [9]&#13;
ipapiis数据库 [A] | ipapicom数据库    [B] | bigdatacloud数据库 [C] | cheervision数据库 [D] | ipqualityscore 数据库 [E]&#13;
IPV4:&#13;
安全得分:&#13;
声誉(越高越好): 0 [2]&#13;
信任得分(越高越好): 0 [8]&#13;
VPN得分(越低越好): 100 [8]&#13;
代理得分(越低越好): 100 [8]&#13;
社区投票-无害: 0 [2]&#13;
社区投票-恶意: 0 [2]&#13;
威胁得分(越低越好): 100 [8]&#13;
欺诈得分(越低越好): 0 [1] 65 [E]&#13;
滥用得分(越低越好): 0 [3]&#13;
ASN滥用得分(越低越好): 0.0031 (Low) [A]&#13;
公司滥用得分(越低越好): 0.0133 (Elevated) [A]&#13;
威胁级别: low [9 B]&#13;
黑名单记录统计:(有多少黑名单网站有记录):&#13;
无害记录数: 0 [2]  恶意记录数: 0 [2]  可疑记录数: 0 [2]  无记录数: 94 [2]&#13;
安全信息:&#13;
使用类型: hosting [0 7 9 A] business [8] hosting - high probability [C] DataCenter/WebHosting/Transit [3]&#13;
公司类型: business [A] hosting [0 7]&#13;
是否云提供商: Yes [7 D]&#13;
是否数据中心: Yes [0 1 5 6 A C] No [8]&#13;
是否移动设备: Yes [E] No [5 A C]&#13;
是否代理: Yes [E] No [0 1 4 5 6 7 8 9 A B C D]&#13;
是否VPN: Yes [0 A E] No [1 6 7 C D]&#13;
是否Tor: No [0 1 3 6 7 8 A B C D E]&#13;
是否Tor出口: No [1 7 D]&#13;
是否网络爬虫: No [9 A B E]&#13;
是否匿名: No [1 6 7 D] Yes [8]&#13;
是否攻击者: No [7 8 D]&#13;
是否滥用者: No [7 8 A C D E]&#13;
是否威胁: No [7 8 C D]&#13;
是否中继: No [0 7 8 C D]&#13;
是否Bogon: No [7 8 A C D]&#13;
是否机器人: No [E]&#13;
DNS-黑名单: 314(Total_Check) 0(Clean) 5(Blacklisted) 15(Other)&#13;
Google搜索可行性：YES&#13;
-------------邮件端口检测--基于oneclickvirt/portchecker开源-------------&#13;
Platform  SMTP  SMTPS POP3  POP3S IMAP  IMAPS&#13;
LocalPort ✔     ✔     ✔     ✔     ✔     ✔&#13;
QQ        ✘     ✔     ✔     ✘     ✔     ✘&#13;
163       ✘     ✔     ✔     ✘     ✔     ✘&#13;
Sohu      ✘     ✔     ✔     ✘     ✔     ✘&#13;
Yandex    ✘     ✔     ✔     ✘     ✔     ✘&#13;
Gmail     ✘     ✔     ✘     ✘     ✘     ✘&#13;
Outlook   ✘     ✘     ✔     ✘     ✔     ✘&#13;
Office365 ✘     ✘     ✔     ✘     ✔     ✘&#13;
Yahoo     ✘     ✔     ✘     ✘     ✘     ✘&#13;
MailCOM   ✘     ✔     ✔     ✘     ✔     ✘&#13;
MailRU    ✘     ✔     ✘     ✘     ✔     ✘&#13;
AOL       ✘     ✔     ✘     ✘     ✘     ✘&#13;
GMX       ✘     ✘     ✔     ✘     ✔     ✘&#13;
Sina      ✘     ✘     ✔     ✘     ✔     ✘&#13;
----------------三网回程--基于oneclickvirt/backtrace开源----------------&#13;
北京电信 219.141.140.10  检测不到回程路由节点的IP地址&#13;
北京联通 202.106.195.68  联通4837   [普通线路]&#13;
北京移动 221.179.155.161 移动CMI    [普通线路]&#13;
上海电信 202.96.209.133  检测不到回程路由节点的IP地址&#13;
上海联通 210.22.97.1     联通4837   [普通线路]&#13;
上海移动 211.136.112.200 检测不到回程路由节点的IP地址&#13;
广州电信 58.60.188.222   检测不到回程路由节点的IP地址&#13;
广州联通 210.21.196.6    联通4837   [普通线路]&#13;
广州移动 120.196.165.24  移动CMI    [普通线路]&#13;
成都电信 61.139.2.69     检测不到回程路由节点的IP地址&#13;
成都联通 119.6.6.6       联通4837   [普通线路]&#13;
成都移动 211.137.96.205  移动CMI    [普通线路]&#13;
准确线路自行查看详细路由，本测试结果仅作参考&#13;
同一目标地址多个线路时，可能检测已越过汇聚层，除了第一个线路外，后续信息可能无效&#13;
---------------------回程路由--感谢fscarmen开源及PR---------------------&#13;
依次测试电信/联通/移动经过的地区及线路，核心程序来自ipip.net或nexttrace，请知悉!&#13;
广州电信 58.60.188.222&#13;
0.56 ms         * RFC1918&#13;
51.64 ms        * RFC1918&#13;
1.04 ms         AS2516 [KDDI] 日本 东京都 东京 kddi.com&#13;
1.30 ms         AS2516 [KDDI] 日本 东京都 东京 kddi.com&#13;
2.13 ms         AS2516 [KDDI] 日本 东京都 东京 kddi.com&#13;
8.56 ms         AS2516 [KDDI] 日本 大阪府 大阪市 kddi.com&#13;
9.97 ms         AS2516 [KDDI] 日本 大阪府 大阪市 kddi.com&#13;
7.90 ms         AS2516 [KDDI] 日本 大阪府 大阪 kddi.com&#13;
* ms    AS2516 [APNIC-AP] 中国 上海 KDDI-CT-Peer kddi.com&#13;
* ms    AS4134 [CHINANET-BB] 中国 广东 广州 www.chinatelecom.com.cn&#13;
* ms    AS4134 中国 广东 深圳 福田区 www.chinatelecom.com.cn 电信&#13;
广州联通 210.21.196.6&#13;
&#13;
广州移动 120.196.165.24&#13;
&#13;
--------------------自动更新测速节点列表--本脚本原创--------------------&#13;
位置             上传速度        下载速度        延迟     丢包率&#13;
Speedtest.net    29.19 Mbps      224.88 Mbps     1.28     0.0%&#13;
日本东京         29.75 Mbps      126.26 Mbps     1.10     NULL&#13;
中国香港         29.79 Mbps      226.47 Mbps     50.12    0.0%&#13;
联通WuXi         26.51 Mbps      20.04 Mbps      213.37   16.8%&#13;
电信Suzhou5G     29.04 Mbps      6.23 Mbps       276.79   NULL&#13;
移动Beijing      30.67 Mbps      252.70 Mbps     99.08    NULL&#13;
------------------------------------------------------------------------&#13;
 总共花费      : 7 分 24 秒&#13;
 时间          : Sun Nov 17 20:58:43 CST 2024&#13;
------------------------------------------------------------------------&#13;
  短链:&#13;
    https://paste.spiritlhl.net/code/kqiPsk.txt&#13;
    http://hpaste.spiritlhl.net/code/kqiPsk.txt&#13;
```&#13;
&#13;
&lt;/details&gt;&#13;
&#13;
### Setup actions&#13;
&#13;
- Enlarge ssh timeout setting:&#13;
&#13;
```sh&#13;
(root) vim /etc/ssh/sshd_config&#13;
```&#13;
&#13;
```diff&#13;
-#ClientAliveInterval 0&#13;
-#ClientAliveCountMax 3&#13;
+ClientAliveInterval 120&#13;
+ClientAliveCountMax 30&#13;
```&#13;
&#13;
```sh&#13;
(root) systemctl restart ssh&#13;
```&#13;
&#13;
- Add user and grant sudo:&#13;
&#13;
```sh&#13;
(root) adduser purple4pur # interactive&#13;
(root) groupadd njupt&#13;
(root) usermod -aG njupt purple4pur&#13;
getent group njupt&#13;
(root) EDITOR=vim visudo&#13;
```&#13;
&#13;
```diff&#13;
+purple4pur ALL=(ALL) ALL&#13;
```&#13;
&#13;
- Install tools:&#13;
&#13;
[[Installing CLI Tools I Use on Debian/Linux]](https://purple4pur.github.io/post/Installing%20CLI%20Tools%20I%20Use%20on%20Debian-Linux.html)&#13;
&#13;
- Initialize dotfiles:&#13;
&#13;
```sh&#13;
bin/chezmoi init --apply https://github.com/purple4pur/dotfiles.git&#13;
vim .bashrc&#13;
```&#13;
&#13;
```diff&#13;
+export PATH=$($HOME/custom_scripts/prepend-path $HOME/bin $HOME/opt/nvim-linux64/bin)&#13;
+export EDITOR=nvim&#13;
+alias v='nvim'&#13;
+source ~/.config/.bash_setup&#13;
```&#13;
&#13;
```sh&#13;
source .bashrc&#13;
```&#13;
&#13;
- Good to go!。</description><guid isPermaLink="true">https://blog.quitw.org//post/Welcome%2C%20My%20New%20VPS%21.html</guid><pubDate>Mon, 18 Nov 2024 17:42:17 +0000</pubDate></item><item><title>Docker CLI Cheat Sheet</title><link>https://blog.quitw.org//post/Docker%20CLI%20Cheat%20Sheet.html</link><description>### Dockerfile&#13;
&#13;
- [[Docker 101]](https://dockerlabs.collabnix.com/workshop/docker/)&#13;
- [[Dockerfile reference]](https://docs.docker.com/reference/dockerfile/)&#13;
&#13;
### docker build&#13;
&#13;
```sh&#13;
docker build -t IMAGE[:TAG] . # build image from in-place Dockerfile&#13;
```&#13;
&#13;
### docker run&#13;
&#13;
```sh&#13;
docker run [OPTIONS] IMAGE[:TAG] [CMD] # run a container from image (and run the command)&#13;
           -d                          # detached mode&#13;
           -it                         # invoke an interactive tty&#13;
           -P                          # publish all EXPOSE ports&#13;
           -p HOST_PORT:CONTAINER_PORT # map a container port to docker host&#13;
           -v VOLUME:CONTAINER_PATH    # mount volume on container path&#13;
           --network NETWORK           # connect to a network&#13;
           --name CONTAINER            # name the container&#13;
           --rm                        # one-off mode, auto remove from docker ps after exited&#13;
```&#13;
&#13;
### docker attach&#13;
&#13;
```sh&#13;
docker attach [OPTIONS] CONTAINER # attach to a detached container&#13;
              --detach-keys=KEYS  # assign a detach key like ctrl-b&#13;
```&#13;
&#13;
To detach from a running container: press detach keys, default is `ctrl-p`+`ctrl-q`.&#13;
&#13;
### docker exec&#13;
&#13;
```sh&#13;
docker exec [OPTIONS] CONTAINER CMD # run the command in a running container&#13;
            -t                      # run in tty then exit&#13;
            -it                     # run in an interactive tty&#13;
```&#13;
&#13;
### docker ps&#13;
&#13;
```sh&#13;
docker ps [OPTIONS] # list all running containers&#13;
          -a        # list all recorded containers (running/paused/exited)&#13;
          -q        # quiet mode, container_id only&#13;
```&#13;
&#13;
### docker inspect&#13;
&#13;
```sh&#13;
docker inspect DOCKER_OBJECT # print object info in json format&#13;
                             #  - image&#13;
                             #  - container&#13;
                             #  - volume&#13;
                             #  - network&#13;
```&#13;
&#13;
### docker image&#13;
&#13;
```sh&#13;
docker build ...                           # build a new image&#13;
docker images [FILTER]                     # list all images, alias of docker image ls&#13;
docker pull IMAGE[:TAG]                    # pull an image from docker hub&#13;
docker tag IMAGE[:TAG] NEW_IMAGE[:NEW_TAG] # rename an image&#13;
docker image rm [-f] IMAGE                 # remove an image&#13;
docker image prune -a                      # remove all unused images&#13;
docker history IMAGE[:TAG]                 # print how the image was built&#13;
```&#13;
&#13;
### docker container&#13;
&#13;
`CONTAINER` can be container_id (short-form OK) or container_name.&#13;
&#13;
```sh&#13;
docker run ...                  # new a container&#13;
docker ps ...                   # list container status&#13;
docker stop CONTAINER           # as it says&#13;
docker kill CONTAINER           # as it says&#13;
docker start/restart CONTAINER  # as it says&#13;
docker pause/unpause CONTAINER  # as it says&#13;
docker logs [OPTIONS] CONTAINER # print stdout of container&#13;
            -f                  # follow mode&#13;
            -n N                # only tail N lines&#13;
docker port CONTAINER [PORT]    # show port mapping info&#13;
docker rm [-f] CONTAINER        # remove record from docker ps&#13;
docker rm $(docker ps -aq)      # remove all records from docker ps&#13;
```&#13;
&#13;
### docker volume&#13;
&#13;
```sh&#13;
docker volume create VOLUME             # create a volume&#13;
docker volume ls                        # list all volumes&#13;
docker volume rm [-f] VOLUME            # remove a volume&#13;
docker volume rm $(docker volume ls -q) # remove all volumes&#13;
```&#13;
&#13;
### docker network&#13;
&#13;
Network has multiple types (a.k.a. drivers) [[Reference]](https://docs.docker.com/engine/network/#drivers) :&#13;
&#13;
- **bridge**: communicate among containers only, publish specific ports to docker host, the default type.&#13;
- **host**: directly expose on host machine, publish options are ignored.&#13;
- **null**: no network provided.&#13;
&#13;
```sh&#13;
docker network create -d DRIVER NETWORK     # create a network of specific type&#13;
docker network ls                           # list all networks&#13;
docker network connect NETWORK CONTAINER    # connect a network to container&#13;
docker network disconnect NETWORK CONTAINER # disconnect a network to container&#13;
docker network rm NETWORK                   # remove a network&#13;
```&#13;
&#13;
### docker compose&#13;
&#13;
- [[Docker compose 101]](https://dockerlabs.collabnix.com/intermediate/workshop/)&#13;
- [[compose.yaml reference]](https://docs.docker.com/reference/compose-file/)&#13;
&#13;
- A `compose.yaml` file is wanted in working directory.&#13;
- `service` in compose is equivalent to `container`.&#13;
&#13;
```sh&#13;
docker compose config                       # print info of in-place compose.yaml&#13;
docker compose build                        # build images defined in compose.yaml&#13;
docker compose up [OPTIONS]                 # start current compose&#13;
                  -d                        # detached mode&#13;
                  --build                   # rebuild images (if needed) then restart&#13;
                  --no-start                # create services only but don't start&#13;
docker compose down [OPTIONS]               # the BEST way to stop compose&#13;
                    -v                      # also remove created volumes&#13;
                    --rmi local|all         # also remove local built images by current compose / all built and pulled images&#13;
docker compose images                       # list images used by current compose&#13;
docker compose ps [-a] [-q] [--services]    # list services used by current compose&#13;
docker compose start/stop/restart [SERVICE] # as it says&#13;
docker compose pause/unpause [SERVICE]      # as it says&#13;
docker compose kill [SERVICE]               # as it says&#13;
docker compose logs [-f] [-n N] [SERVICE]   # print/follow stdout in service&#13;
docker compose run SERVICE CMD              # run a one-time command in a new service, not the running one&#13;
docker compose rm [OPTIONS] [SERVICE]       # remove stopped service from ps&#13;
                  -s                        # stop and remove&#13;
```。</description><guid isPermaLink="true">https://blog.quitw.org//post/Docker%20CLI%20Cheat%20Sheet.html</guid><pubDate>Mon, 18 Nov 2024 17:17:14 +0000</pubDate></item><item><title>Installing CLI Tools I Use on Debian/Linux</title><link>https://blog.quitw.org//post/Installing%20CLI%20Tools%20I%20Use%20on%20Debian-Linux.html</link><description>### git&#13;
&#13;
```sh&#13;
(root) apt update&#13;
(root) apt install git&#13;
```&#13;
&#13;
### chezmoi&#13;
&#13;
[[Official installation guide]](https://www.chezmoi.io/install/#one-line-binary-install)&#13;
&#13;
```sh&#13;
sh -c '$(curl -fsLS get.chezmoi.io)' # install to $HOME/bin&#13;
```&#13;
&#13;
### starship&#13;
&#13;
[[Official installation guide]](https://starship.rs/guide/#step-1-install-starship)&#13;
&#13;
```sh&#13;
(root) curl -sS https://starship.rs/install.sh | sh # install to /usr/local/bin&#13;
```&#13;
&#13;
### neovim&#13;
&#13;
[[Official installation guide]](https://github.com/neovim/neovim/blob/master/INSTALL.md#pre-built-archives-1)&#13;
&#13;
```sh&#13;
curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz&#13;
mkdir $HOME/opt&#13;
rm $HOME/opt/nvim-linux64 -rf # remove old version&#13;
tar -C $HOME/opt -xzf nvim-linux64.tar.gz # install to $HOME/opt/nvim-linux64/bin&#13;
rm nvim-linux64.tar.gz&#13;
```&#13;
&#13;
### fd&#13;
&#13;
[[Github]](https://github.com/sharkdp/fd)&#13;
&#13;
```sh&#13;
(root) apt update&#13;
(root) apt install fd-find&#13;
(root) ln -sf /usr/bin/fdfind /usr/bin/fd&#13;
```&#13;
&#13;
### rg&#13;
&#13;
[[Github]](https://github.com/BurntSushi/ripgrep)&#13;
&#13;
```sh&#13;
(root) apt update&#13;
(root) apt install ripgrep&#13;
```&#13;
&#13;
### docker&#13;
&#13;
[[Official installation guide]](https://docs.docker.com/engine/install/debian/#install-using-the-repository)&#13;
&#13;
```sh&#13;
# Add Docker's official GPG key:&#13;
sudo apt-get update&#13;
sudo apt-get install ca-certificates curl&#13;
sudo install -m 0755 -d /etc/apt/keyrings&#13;
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc&#13;
sudo chmod a+r /etc/apt/keyrings/docker.asc&#13;
&#13;
# Add the repository to Apt sources:&#13;
echo \&#13;
  'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \&#13;
  $(. /etc/os-release &amp;&amp; echo '$VERSION_CODENAME') stable' | \&#13;
  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null&#13;
sudo apt-get update&#13;
&#13;
# Install&#13;
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&#13;
&#13;
# Hello world&#13;
sudo docker run hello-world&#13;
&#13;
# Add user to docker group to grant him privileges&#13;
# WARNING: Do with caution! docker group has the same permissions of root!&#13;
sudo usermod -aG docker USERNAME&#13;
```。</description><guid isPermaLink="true">https://blog.quitw.org//post/Installing%20CLI%20Tools%20I%20Use%20on%20Debian-Linux.html</guid><pubDate>Sun, 17 Nov 2024 17:09:19 +0000</pubDate></item><item><title>goto Repetition ([-&gt;n]) in SVA</title><link>https://blog.quitw.org//post/goto%20Repetition%20%28%5B--n%5D%29%20in%20SVA.html</link><description>This article is basically a dev memo of [Ben Cohen's amazing tutorial on this topic](https://systemverilog.us/vf/goto_conseq.pdf) , followed by a practical live demo in my work.&#13;
&#13;
### Basic usage and live demo&#13;
&#13;
In a word, goto repetition describe a sequence of a boolean value `b` becoming True for `n` times in following cycles, and **don't care when or continuously or not**.&#13;
&#13;
Given property `a |=&gt; b[-&gt;2] ##1 c`:&#13;
&#13;
```&#13;
       a: 1 - - - - - - -&#13;
       b: - 0 1 0 0 0 1 -&#13;
       c: - - - - - - - 1&#13;
property: |---^-------^-! // match&#13;
```&#13;
&#13;
Let's say here's a counter of range 0 to max value 2. I want a property to trace the counter from 0 to 2 then back to 0, and the other values are all not-care.&#13;
&#13;
```&#13;
   counter: 0 -&gt; 1 -&gt; 0 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 1 -&gt; 2 -&gt; 1 -&gt; 0&#13;
 fail case: |---------! // fail&#13;
match case:                |---------^-------------------! // match&#13;
```&#13;
&#13;
1. Starting point (antecedent)&#13;
&#13;
It should start from `(cnt == 0)`:&#13;
&#13;
```systemverilog&#13;
(cnt == 0) |=&gt; // TODO&#13;
```&#13;
&#13;
2. Finding 2&#13;
&#13;
A value of 2 is expected in following cycles:&#13;
&#13;
```systemverilog&#13;
(cnt == 0) |=&gt; (cnt == 2)[-&gt;1] // TODO&#13;
```&#13;
&#13;
3. Back to 0&#13;
&#13;
After that let's get back to 0 and done:&#13;
&#13;
```systemverilog&#13;
(cnt == 0) |=&gt; (cnt == 2)[-&gt;1] ##1 (cnt == 0)[-&gt;1]; // Done!&#13;
```&#13;
&#13;
OK. I believe this property can handle the most ideal case:&#13;
&#13;
```&#13;
 counter: 0 -&gt; 1 -&gt; 2 -&gt; 1 -&gt; 0&#13;
property: |---------^---------! // match&#13;
```&#13;
&#13;
But it has issues. One is I want it to fail when the counter falls back to 0 before reaching 2, and now it won't:&#13;
&#13;
```&#13;
 counter: 0 -&gt; 1 -&gt; 0 -&gt; 2 -&gt; 1 -&gt; 0&#13;
property: |---------?----^---------! // match&#13;
                    ^-I want it to fail here&#13;
```&#13;
&#13;
To fix that, replace `(cnt == 2)[-&gt;1]` with a restriction of not seeing 0 before:&#13;
&#13;
```systemverilog&#13;
(cnt == 0) |=&gt; (cnt != 0)[*0:$] ##1 (cnt == 2) ##1 (cnt == 0)[-&gt;1];&#13;
```&#13;
&#13;
Second issue is it will start a new thread once it sees 0, which is definitely unnecessary:&#13;
&#13;
```&#13;
 counter: 0 -&gt; 0 -&gt; 0 -&gt; 1 -&gt; 2&#13;
property: |-------------------^ // unnecessary&#13;
               |--------------^ // unnecessary&#13;
                    |---------^ // I want only this&#13;
```&#13;
&#13;
To fix that, replace the antecedent with a short sequence of seeing 0 then 1:&#13;
&#13;
```systemverilog&#13;
(cnt == 0) ##1 (cnt == 1) |=&gt; (cnt != 0)[*0:$] ##1 (cnt == 2) ##1 (cnt == 0)[-&gt;1];&#13;
// OR:     $rose(cnt &gt; 0) |=&gt; ...&#13;
```&#13;
&#13;
Now it works great!&#13;
&#13;
### [-&gt;n] vs [*0:$]&#13;
&#13;
`b[-&gt;n]` is equivalent to `(!b[*0:$] ##1 b)[*n]`, which works like syntactic sugar.&#13;
&#13;
### [-&gt;n] vs first_match()&#13;
&#13;
`b[-&gt;n]` only accepts `b` as a single boolean value without logical operators. So in these cases use `first_match()` instead.&#13;
&#13;
```systemverilog&#13;
(AWREADY &amp; AWVALID)[-&gt;1]        // bit operator: OK&#13;
first_match(AWREADY &amp;&amp; AWVALID) // logical operator: use first_match()&#13;
```&#13;
&#13;
### When NOT to use&#13;
&#13;
NEVER use it in the 1st term of antecedent. Because it will start tons of unnecessary threads.&#13;
&#13;
```systemverilog&#13;
a[-&gt;1] ##1 b |=&gt; c; // BAD and not necessary&#13;
```&#13;
&#13;
For more detailed use guides please refer to [Ben's article](https://systemverilog.us/vf/goto_conseq.pdf) .。</description><guid isPermaLink="true">https://blog.quitw.org//post/goto%20Repetition%20%28%5B--n%5D%29%20in%20SVA.html</guid><pubDate>Fri, 15 Nov 2024 07:07:51 +0000</pubDate></item><item><title>H△G 1st Live in Guangzhou 参战小记</title><link>https://blog.quitw.org//post/H%E2%96%B3G%201st%20Live%20in%20Guangzhou%20-can-zhan-xiao-ji.html</link><description>### 我和 H△G&#13;
&#13;
我最早对 H△G 有印象最早应该是在 osu! 里听到了他们的《カラフル》，但也并没有特别关注，处于一个听日音相当杂食的状态。</description><guid isPermaLink="true">https://blog.quitw.org//post/H%E2%96%B3G%201st%20Live%20in%20Guangzhou%20-can-zhan-xiao-ji.html</guid><pubDate>Tue, 12 Nov 2024 16:58:47 +0000</pubDate></item><item><title>避免沟通漏斗，传递完整的信息</title><link>https://blog.quitw.org//post/bi-mian-gou-tong-lou-dou-%EF%BC%8C-chuan-di-wan-zheng-de-xin-xi.html</link><description>### 何谓「漏斗」&#13;
&#13;
「沟通漏斗」是一个很形象的概念，形容这样一种场景：A 把一件事告诉给 B，但由于双方的理解偏差或其他原因，导致 B 只接收到 80% 的原意，同样的事情继续发生在 B 告诉 C、C 告诉 D 上，结果整个沟通链上这件事的原意损失得越来越多，如同一个漏斗般。</description><guid isPermaLink="true">https://blog.quitw.org//post/bi-mian-gou-tong-lou-dou-%EF%BC%8C-chuan-di-wan-zheng-de-xin-xi.html</guid><pubDate>Sat, 09 Nov 2024 05:42:48 +0000</pubDate></item><item><title>AXI4 Address Break Down</title><link>https://blog.quitw.org//post/AXI4%20Address%20Break%20Down.html</link><description>### Must know&#13;
&#13;
- Unit of address is **Byte**.&#13;
    - 0x00 maps to a 1-byte space in memory.&#13;
    - 0x01 maps to the next byte.&#13;
- **Aligned address** means `Address % Size == 0`.&#13;
    - where `Size` is num of bytes per transfer: `2 ** AxSIZE` or `1 &lt;&lt; AxSIZE`.&#13;
- **Narrow transfer** means a transfer not using all *WDATA* bytes, but selected by *WSTRB*.&#13;
- *WSTRB* valid bits should match `Size`.&#13;
&#13;
### Schematic diagram&#13;
&#13;
What an AXI address in memory looks like:&#13;
&#13;
- *xDATA* width: 32 bits&#13;
&#13;
```&#13;
       Bit# |31    24|23    16|15     8|7      0|&#13;
            +--------+--------+--------+--------+&#13;
AXI Address |  0x03  |  0x02  |  0x01  |  0x00  |&#13;
            +--------+--------+--------+--------+&#13;
            |  0x07  |  0x06  |  0x05  |  0x04  |&#13;
            +--------+--------+--------+--------+&#13;
            |                              ...  |&#13;
            +-----------------------------------+&#13;
```&#13;
&#13;
### Calculation of burst INCR addresses&#13;
&#13;
&gt; Reference: AXI Spec $$A4.1.6&#13;
&#13;
A burst INCR request can start from an **aligned address** or **unaligned address**. For both cases, the 2nd address is always the next aligned address. Each transfer will step forward 1 `Size` space, making the whole burst INCR request write to or read from a consecutive memory space.&#13;
&#13;
- Example function to calculate the start address of the Nth transfer (Nth starts from 1):&#13;
&#13;
```systemverilog&#13;
function AXI_Address calc_Nth_start_addr(AXI_Address start_addr, int axsize, int Nth);&#13;
    int size = 2 ** axsize; // num of bytes per transfer&#13;
    AXI_Address aligned_addr = start_addr / size * size; // round down to aligned address&#13;
    // Nth starts from 1&#13;
    AXI_Address Nth_start_addr = (Nth == 1) ? (start_addr)                      :&#13;
                                              (aligned_addr + (Nth - 1) * size) ;&#13;
    return Nth_start_addr;&#13;
endfunction&#13;
```&#13;
&#13;
- Example function to calculate the last address of the whole burst INCR request:&#13;
&#13;
```systemverilog&#13;
function AXI_Address calc_end_addr(AXI_Address start_addr, int axsize, int axlen);&#13;
    int total_len = axlen + 1;&#13;
    int size = 2 ** axsize; // num of bytes per transfer&#13;
    AXI_Address aligned_addr = start_addr / size * size; // round down to aligned address&#13;
    AXI_Address end_addr = aligned_addr + total_len * size - 1;&#13;
    return end_addr;&#13;
endfunction&#13;
```&#13;
&#13;
### 4K boundary&#13;
&#13;
*4K* basically refers to a 4K-Byte space in memory, which is also called a *Page*. In AXI it means a 4096 (0x1000) wide address space. An AXI request is not allowed to cross the addresses that start a new *Page*. In other words, all accessed address should only be within one *Page*, E.g. `[0x3000, 0x3FFF]`.&#13;
&#13;
- Example function to check if an address space has crossed 4K boundary:&#13;
&#13;
```systemverilog&#13;
function bit has_crossed_4k_boundary(AXI_Address start_addr, AXI_Address end_addr);&#13;
    return ((start_addr &gt;&gt; 12) != (end_addr &gt;&gt; 12));&#13;
endfunction&#13;
```&#13;
&#13;
### Appendix: AXI Spec&#13;
&#13;
[[AMBA AXI Protocol Specification]](https://developer.arm.com/documentation/ihi0022/latest/)。</description><guid isPermaLink="true">https://blog.quitw.org//post/AXI4%20Address%20Break%20Down.html</guid><pubDate>Fri, 08 Nov 2024 10:00:46 +0000</pubDate></item><item><title>Example Git Config File</title><link>https://blog.quitw.org//post/Example%20Git%20Config%20File.html</link><description>## File Path&#13;
&#13;
* Linux: `~/.gitconfig`&#13;
* Windows: `C:/Users/&lt;user&gt;/.gitconfig`&#13;
&#13;
## Example&#13;
&#13;
```&#13;
[user]&#13;
    email = xxx@yyy.zzz&#13;
    name = xxx&#13;
[http]&#13;
    proxy = 127.0.0.1:10809&#13;
[core]&#13;
    editor = nvim&#13;
    pager = moar&#13;
[color]&#13;
    ui = auto&#13;
[diff]&#13;
    tool = meld&#13;
```&#13;
&#13;
## CLI Command&#13;
&#13;
```sh&#13;
git config --global --list&#13;
           --local  --get&#13;
                    --set   user.email 'xxx@yyy.zzz'&#13;
                    --unset&#13;
```。</description><guid isPermaLink="true">https://blog.quitw.org//post/Example%20Git%20Config%20File.html</guid><pubDate>Tue, 05 Nov 2024 14:57:56 +0000</pubDate></item><item><title>2024 年各类 Live 及展会参战记录</title><link>https://blog.quitw.org//post/2024%20-nian-ge-lei-%20Live%20-ji-zhan-hui-can-zhan-ji-lu.html</link><description>&gt; WIP&#13;
&#13;
### Live&#13;
&#13;
| No. | 日期  | Live                                                                                                                                    | 场地      | 主题     | 城市 | 票价       |&#13;
| --- | ---   | ---                                                                                                                                     | ---       | ---      | ---  | ---        |&#13;
| 1   | 6/10  | STARLINK METEOR 1st Live                                                                                                                | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 2   | 6/22  | 「多厨狂喜」白金交响乐团二次元交响音乐会                                                                                                | 音乐厅    | ACG 交响 | 上海 | 288        |&#13;
| 3   | 6/23  | 花之礼赞《奏响吧，和音社！》经典动漫交响音乐会                                                                                          | 音乐厅    | ACG 交响 | 上海 | 180        |&#13;
| 4   | 6/30  | Star2U Macro Idol Festival Vol.14                                                                                                       | Livehouse | 地偶     | 上海 | 128        |&#13;
| 5   | 7/12  | 「夜³歌症候群」三夜 Only                                                                                                                | Livehouse | ACG 摇滚 | 上海 | 99         |&#13;
| 6   | 7/20  | CrossingX意次元 音乐番 Only                                                                                                             | Livehouse | ACG 摇滚 | 上海 | 78         |&#13;
| 7   | 7/21  | Star2U 跨次元嘉年华 Vol.12.5 邦邦 Only                                                                                                  | Livehouse | ACG 摇滚 | 上海 | 108        |&#13;
| 8   | 7/26  | fhana China Live Tour 2024                                                                                                              | Livehouse | 日音     | 上海 | 380        |&#13;
| 9   | 8/11  | 漫音季 2024 夏                                                                                                                          | Livehouse | ACG 摇滚 | 上海 | 0 (中奖票) |&#13;
| 10  | 8/17  | 跨越国境的旋律 大和田雅洋x和音社交响吹奏音乐会                                                                                          | 音乐厅    | ACG 交响 | 上海 | 232        |&#13;
| 11  | 8/18  | 幻奏盛宴 2024 上海场                                                                                                                    | 音乐厅    | ACG 交响 | 上海 | 289        |&#13;
| 12  | 8/24  | 《不眨眼》H△G 1st Live in Shanghai                                                                                                      | Livehouse | 日音     | 上海 | 480        |&#13;
| 13  | 9/7   | 和音社录制现场旁听 (原演出取消)                                                                                                         | 音乐厅    | ACG 交响 | 上海 | 0 (补偿)   |&#13;
| 14  | 9/8   | Tie-Up Anirock Live 2.0                                                                                                                 | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 15  | 10/7  | 极光纪 Polar Ray 5th                                                                                                                    | Livehouse | ACG 摇滚 | 上海 | 88         |&#13;
| 16  | 10/12 | 《次元共鸣》ACG 乐队番主题演唱会                                                                                                        | Livehouse | ACG 摇滚 | 上海 | 160        |&#13;
| 17  | 11/3  | 「多厨狂喜」白金交响乐团二次元交响音乐会                                                                                                | 音乐厅    | ACG 交响 | 上海 | 288        |&#13;
| 18  | 11/10 | [「声」H△G 1st Live in Guangzhou](https://purple4pur.github.io/post/H%E2%96%B3G%201st%20Live%20in%20Guangzhou%20-can-zhan-xiao-ji.html) | Livehouse | 日音     | 广州 | 480        |&#13;
| 19  | 11/16 | milet Asia Tour 2024                                                                                                                    | 演艺馆    | 日音     | 上海 | 880        |&#13;
| 20  | 11/24 | 泽野弘之 LIVE [nZk] 2024                                                                                                                | 体育馆    | 日音     | 上海 | 880        |&#13;
| 21  | 12/14 | 玖玖的奇妙冒险 帝玖管弦乐团 2024 交响音乐会                                                                                             | 音乐厅    | ACG 交响 | 上海 | 580        |&#13;
| 22  | 12/15 | 「旧友 \| 新声」陈致逸作品音乐会 2024                                                                                                   | 剧场      | ???      | 上海 | 480        |&#13;
&#13;
### 展会&#13;
&#13;
| No. | 日期  | 展会                             | 城市 | 票价 |&#13;
| --- | ---   | ---                              | ---  | ---  |&#13;
| 1   | 7/27  | Chinajoy 2024                    | 上海 | 188  |&#13;
| 2   | 11/30 | 创作连锁 2024 日厂 Vocaloid Only | 上海 | 139  |。</description><guid isPermaLink="true">https://blog.quitw.org//post/2024%20-nian-ge-lei-%20Live%20-ji-zhan-hui-can-zhan-ji-lu.html</guid><pubDate>Sun, 03 Nov 2024 14:27:38 +0000</pubDate></item><item><title>A Practical Guide to Git Submodule</title><link>https://blog.quitw.org//post/A%20Practical%20Guide%20to%20Git%20Submodule.html</link><description>## Clone a Repository With Its Submodules&#13;
&#13;
If is a first-time clone:&#13;
&#13;
```bash&#13;
git clone --recursive &lt;...&gt;&#13;
```&#13;
&#13;
If is an existing repository:&#13;
&#13;
```bash&#13;
git submodule update --init&#13;
```&#13;
&#13;
## Add a Submodule&#13;
&#13;
```bash&#13;
git submodule add &lt;repo_url&gt; [&lt;path&gt;]&#13;
```&#13;
&#13;
Running this command will:&#13;
&#13;
* clone `&lt;repo_url&gt;` into `&lt;path&gt;` , but separate its `.git` folder (see &lt;ins&gt;Change Settings of Submodules&lt;/ins&gt;)&#13;
* add submodule infomation into `.gitmodules`&#13;
* register submodule in `.git/modules/path/to/submodule` (where the `.git` folder is actually in)&#13;
* register submodule in `.git/config` (do a `git submodule init` )&#13;
* stage `.gitmodules` and the submodule folder&#13;
&#13;
This clone will be a very full clone, which means not so many configs can play a role.&#13;
&#13;
## Pull Upstream Changes&#13;
&#13;
Two ways:&#13;
&#13;
* `git submodule update --remote [&lt;path&gt;]`&#13;
* OR: `git pull` in the submodule&#13;
&#13;
Pulling upstream will also update the recorded hashes. Don't forget to commit changes.&#13;
&#13;
## Change Settings of Submodules&#13;
&#13;
There're two paths available:&#13;
&#13;
* `/path/to/submodule` (recommended)&#13;
* `.git/modules/path/to/submodule` (the actual path of the `.git` folder)&#13;
&#13;
Change working directory into one of them, then any git commands will apply to the submodule. For the first path, if is not been cloned, commands would still apply to the top-level repository. It is recommended to open a new terminal tab/window for changes within a submodule.&#13;
&#13;
What can do in a submodule:&#13;
&#13;
* pull upstream changes&#13;
* setup [sparse checkout](https://purple4pur.github.io/post/Git%20Sparse%20Checkout.html) (not that practical)&#13;
&#13;
What can NOT do (or not be recommended) in a submodule:&#13;
&#13;
* change branch (see &lt;ins&gt;Change Tracking Branch&lt;/ins&gt;)&#13;
* change remote url (see &lt;ins&gt;Change Submodule URL&lt;/ins&gt;)&#13;
&#13;
## Change Tracking Branch&#13;
&#13;
A submodule can only be tracked with a **remote named branch**, not a hash, not a local branch.&#13;
&#13;
### 1. Update Branch Setting&#13;
&#13;
* `git submodule set-branch -b &lt;remote-branch&gt; &lt;module&gt;` (not recommended - verbose and easy to mismatch)&#13;
* OR: manually append `branch = &lt;remote-branch&gt;` below submodule's url in `.gitmodules`&#13;
&#13;
Warning: `&lt;module&gt;` must match the name in `.gitmodules` .&#13;
&#13;
If want to remove this setting (means to use the default branch):&#13;
&#13;
* `git submodule set-branch -d &lt;module&gt;` (not recommended)&#13;
* OR: manually remove the `branch = &lt;remote-branch&gt;` line&#13;
&#13;
### 2. Switch to the New Branch&#13;
&#13;
```bash&#13;
git submodule update --remote [&lt;path&gt;]&#13;
```&#13;
&#13;
This command will:&#13;
&#13;
1. do a `git pull; git checkout origin/&lt;remote-branch&gt;` in submodules&#13;
2. update recorded hash (checked with `status`. See &lt;ins&gt;`git submodule status`&lt;/ins&gt;)&#13;
&#13;
Don't forget to commit changes.&#13;
&#13;
## Change Submodule URL&#13;
&#13;
Mostly the same as &lt;ins&gt;Change Tracking Branch&lt;/ins&gt; , but change `url = &lt;URL&gt;` line instead.&#13;
&#13;
## Move a Submodule to a New Path&#13;
&#13;
```bash&#13;
git mv /path/to/submodule /new/path&#13;
```&#13;
&#13;
`git mv` handles everything.&#13;
&#13;
## Remove a Submodule From Current Repository&#13;
&#13;
1. `git submodule deinit /path/to/submodule` : unregister submodule from `.git/config`&#13;
2. remove `.git/modules/path/to/submodule` manually&#13;
3. `git rm /path/to/submodule` : remove submodule folder, unregister from `.gitmodules` and stage changes&#13;
&#13;
[Reference](https://stackoverflow.com/a/16162000/12509229)&#13;
&#13;
## Submodule Command Explanation&#13;
&#13;
[Full Documentation](https://git-scm.com/docs/git-submodule) | [Example Usage](https://git-scm.com/book/en/v2/Git-Tools-Submodules)&#13;
&#13;
### `git submodule -h`&#13;
&#13;
List all sub-commands.&#13;
&#13;
### `git submodule`&#13;
&#13;
Same as `git submodule status` without parameters.&#13;
&#13;
### `git submodule status`&#13;
&#13;
List all submodules with paths and **current hashes**. Hashes may have a prefix:&#13;
&#13;
* `-` : not initialized. An `init` or `update --init` is wanted&#13;
* `+` : currently checked out hash differs from the **recorded one**. An `update` is wanted&#13;
&#13;
### `git submodule add`&#13;
&#13;
Add a new submodule. See &lt;ins&gt;Add a Submodule&lt;/ins&gt; .&#13;
&#13;
### `git submodule init/deinit`&#13;
&#13;
(Un)register a submodule. 'Registered' means 'active'. `update` and other sub-commands will only apply to active submodules.&#13;
&#13;
### `git submodule update`&#13;
&#13;
Checkout the recorded hash of submodules. Some options:&#13;
&#13;
* `--init` : shorthand of `init` then `update`&#13;
* `--remote` : pull upstream and update recorded hashes. See &lt;ins&gt;Pull Upstream Changes&lt;/ins&gt;&#13;
* `--recursive` : `update` all nested submodules&#13;
&#13;
### `git submodule foreach &lt;command&gt;`&#13;
&#13;
Run `&lt;command&gt;` within each submodule. Example: `git submodule foreach git pull` .&#13;
。</description><guid isPermaLink="true">https://blog.quitw.org//post/A%20Practical%20Guide%20to%20Git%20Submodule.html</guid><pubDate>Sat, 02 Nov 2024 07:06:15 +0000</pubDate></item><item><title>一种更平衡听歌和上分的 maimai 选歌策略</title><link>https://blog.quitw.org//post/yi-zhong-geng-ping-heng-ting-ge-he-shang-fen-de-%20maimai%20-xuan-ge-ce-lve.html</link><description>我打 maimai 的背景情况是不太勤，很多歌都尚无成绩，同时又还有些上分空间。</description><guid isPermaLink="true">https://blog.quitw.org//post/yi-zhong-geng-ping-heng-ting-ge-he-shang-fen-de-%20maimai%20-xuan-ge-ce-lve.html</guid><pubDate>Thu, 31 Oct 2024 15:46:28 +0000</pubDate></item><item><title>ROG Falchion(魔导士) RX Low Profile 键盘使用体验</title><link>https://blog.quitw.org//post/ROG%20Falchion%28-mo-dao-shi-%29%20RX%20Low%20Profile%20-jian-pan-shi-yong-ti-yan.html</link><description>双十一于京东购入，实付 1179 元，于 10 月 15 日晚上拿到手，持续使用至本文发布时（约两周）。</description><guid isPermaLink="true">https://blog.quitw.org//post/ROG%20Falchion%28-mo-dao-shi-%29%20RX%20Low%20Profile%20-jian-pan-shi-yong-ti-yan.html</guid><pubDate>Mon, 28 Oct 2024 17:29:41 +0000</pubDate></item><item><title>Git Sparse Checkout</title><link>https://blog.quitw.org//post/Git%20Sparse%20Checkout.html</link><description>## What Is Sparse Checkout?&#13;
&#13;
Checkout only part of the entire repository. Focus on files you need.&#13;
&#13;
Keep in mind: sparse-checkout settings are only kept in local copy. Won't be pushed. Won't be cloned.&#13;
&#13;
## Enable/Set/Add&#13;
&#13;
```bash&#13;
git sparse-checkout set/add [--no-cone] &lt;file(s)&gt;&#13;
```&#13;
&#13;
* `set` : re-write current settings&#13;
* `add` : append to current settings&#13;
&#13;
Running this will automatically enable sparse-checkout feature, which can be checked with `git config --list` .&#13;
&#13;
Internally, sparse-checkout maintains two files:&#13;
&#13;
1. `.git/config` , where stores the feature ON/OFF flags&#13;
2. `.git/info/sparse-checkout` . This file has a format the same as `.gitignore` but plays a **whitelist** role , and is the one `set/add` write to.&#13;
&#13;
Alternatively, the user can edit `.git/info/sparse-checkout` manually. (See also: &lt;ins&gt;`--cone` (default flag) vs `--no-cone`&lt;/ins&gt;)&#13;
&#13;
## List Current Settings&#13;
&#13;
```bash&#13;
git sparse-checkout list&#13;
```&#13;
&#13;
## Disable/Re-enable&#13;
&#13;
### Disable&#13;
&#13;
```bash&#13;
git sparse-checkout disable&#13;
```&#13;
&#13;
: turn off all sparse-checkout flags in `.git/config` , but not touch `.git/info/sparse-checkout` .&#13;
&#13;
### Re-enable&#13;
&#13;
```bash&#13;
git sparse-checkout add # no files here&#13;
```&#13;
&#13;
: turn on flags, continue using current `.git/info/sparse-checkout` .&#13;
&#13;
## `--cone` (default flag) vs `--no-cone`&#13;
&#13;
`--cone` is more like a 'smart' mode:&#13;
&#13;
* It automatically add `/*` and `!/*/` to `.git/info/sparse-checkout` (which means it **always allows top-level files** such as `/README.md` . It is impossible to filter them out.)&#13;
* When `set/add` , for example, passing `lua` will become a `/lua/` line in `.git/info/sparse-checkout`&#13;
&#13;
`--no-cone` is somewhat 'manual' mode:&#13;
&#13;
* When `set/add` , `&lt;file(s)&gt;` will be written into `.git/info/sparse-checkout` character by character.&#13;
&#13;
In this mode, the user can filter anything without any restriction. But to remember: always set a path with a leading `/` like this: `git sparse-checkout add /README.md /lua /doc` .&#13;
&#13;
If you have been aware of all of above, I suggest `--no-cone` mode, which is more flexible. [An official discussion here](https://git-scm.com/docs/git-sparse-checkout#_internalsnon_cone_problems) .&#13;
&#13;
## Extra: Start From a Minimal Clone&#13;
&#13;
```bash&#13;
git clone --filter=blob:none --no-checkout &lt;URL&gt; [&lt;...&gt;]&#13;
git sparse-checkout set [&lt;...&gt;]&#13;
git checkout&#13;
```&#13;
&#13;
[Reference](https://github.blog/2020-01-17-bring-your-monorepo-down-to-size-with-sparse-checkout/#sparse-checkout-and-partial-clones)。</description><guid isPermaLink="true">https://blog.quitw.org//post/Git%20Sparse%20Checkout.html</guid><pubDate>Sat, 26 Oct 2024 15:17:05 +0000</pubDate></item><item><title>爱好是一种能让自己开心的习惯</title><link>https://blog.quitw.org//post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</link><description>最近在回想我的爱好，在过去的十年里其实改变了不少。</description><guid isPermaLink="true">https://blog.quitw.org//post/ai-hao-shi-yi-zhong-neng-rang-zi-ji-kai-xin-de-xi-guan.html</guid><pubDate>Fri, 25 Oct 2024 09:35:28 +0000</pubDate></item><item><title>vcs/verdi Cheat Sheet</title><link>https://blog.quitw.org//post/vcs-verdi%20Cheat%20Sheet.html</link><description>## vcs&#13;
&#13;
```bash&#13;
-full64 +v2k -sverilog              # 固定起手（v2k 指 Verilog-2001）&#13;
-lca -debug_access+all -kdb         # 保存波形需要，debug 开关极大影响仿真时间[1][2]&#13;
-timescale=1ns/100ps                # 时间精度，考虑在这里统一指定&#13;
-ntb_opts uvm-1.1                   # UVM&#13;
+incdir+&lt;XX_DIR&gt; &lt;XX_file&gt;          # rtl、verif 文件&#13;
+define+&lt;XX&gt; +define+&lt;XX&gt;=&lt;YY&gt;      # 设置 define&#13;
+vcs+fsdbon                         # 自动生成波形文件（novas.fsdb）&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt;   # 统计覆盖率[3][4]&#13;
-fgp                                # 启用多线程仿真支持[5]&#13;
-j&lt;NUM&gt;                             # 多线程编译，实测对编译速度可能几乎无提升&#13;
-R [simv_options]                   # 编译后自动开始仿真&#13;
```&#13;
&#13;
## simv&#13;
&#13;
```bash&#13;
+UVM_TESTNAME=&lt;TEST&gt;                # 指定 run_test() 调用的 uvm_test&#13;
+ntb_random_seed=&lt;SEED&gt;             # 随机数种子，用于 random()、randomize() 等&#13;
-ucli -i &lt;UCLI_FILE&gt;                # 灵活控制是否生成波形&#13;
+fsdb+delta                         # 记录 delta time，能在 verdi 里展开&#13;
-cm line+branch -cm_dir &lt;cov.vdb&gt; -cm_name &lt;TEST&gt;&#13;
                                    # 统计覆盖率[3][4]&#13;
+UVM_TR_RECORD +UVM_LOG_RECORD +UVM_VERDI_TRACE&#13;
                                    # UVM debug 开关，能在 verdi 里可视化 transaction&#13;
+UVM_VERBOSITY=&lt;VERBOSITY&gt;          # 灵活调整 UVM 打印冗余级别&#13;
-fgp=num_threads:&lt;NUM&gt;,num_fsdb_threads:&lt;NUM&gt;,allow_less_cores -Xdprof=timeline&#13;
                                    # 多线程仿真[5]，实测对仿真速度可能几乎无提升&#13;
```&#13;
&#13;
### &lt;UCLI_FILE&gt;&#13;
&#13;
```bash&#13;
fsdbDumpvars 0                      # 生成所有波形，默认文件名为 novas.fsdb，极大影响仿真时间[1]&#13;
run&#13;
quit&#13;
```&#13;
&#13;
## verdi&#13;
&#13;
```bash&#13;
-dbdir simv.daidir                  # 加载代码&#13;
-ssf novas.fsdb                     # 加载波形，如果存在关联的代码也会自动加载（即省略 -dbdir）&#13;
-cov -covdir &lt;cov.vdb&gt;              # 打开 vdCoverage 窗口，并加载覆盖率信息&#13;
```&#13;
&#13;
* `&lt;Shift+滚轮&gt;`：前后平移波形&#13;
* `双击波形边沿`：在代码窗口中跳转到对应的激励&#13;
* `nWave-&gt;Tools-&gt;Transaction Debug-&gt;Transaction and Protocol Analyzer`：打开可视化 transaction 面板&#13;
* `tProtocolAnalyzer-&gt;View-&gt;Sync. With nWave`：关联上下两个面板（波形、transaction）&#13;
* `Tools-&gt;Coverage`：打开 vdCoverage 窗口&#13;
* `vdCoverage-&gt;Tools-&gt;Generate URG Report`：生成覆盖率报告&#13;
&#13;
## Reference&#13;
&#13;
[1] [vcs中debug选项、波形dump对仿真时间的影响_kevindas的博客-CSDN博客](https://blog.csdn.net/kevindas/article/details/107307654)&#13;
[2] [Synopsys VCS 编译时，启用debug选项_XtremeDV的博客-CSDN博客](https://blog.csdn.net/zhajio/article/details/88839838)&#13;
[3] [vcs覆盖率选项_weixin_39662684的博客-CSDN博客](https://blog.csdn.net/weixin_39662684/article/details/108255556)&#13;
[4] [VCS覆盖率使用详解（基础、合并、查看、分析） - 知乎](https://zhuanlan.zhihu.com/p/620471082)&#13;
[5] [VCS -- fgp 仿真加速 - Thisway2014 - 博客园](https://www.cnblogs.com/thisway2014/p/16783601.html)。</description><guid isPermaLink="true">https://blog.quitw.org//post/vcs-verdi%20Cheat%20Sheet.html</guid><pubDate>Thu, 24 Oct 2024 16:04:25 +0000</pubDate></item><item><title>Hello Gmeek!</title><link>https://blog.quitw.org//post/Hello%20Gmeek%21.html</link><description>Hello Gmeek, welcome back my blog!&#13;
&#13;
I knew this project from V2EX months ago and thinking wow that is exactly what I want: a simple enough place to write down anything without handling deployment, page style, server, etc. Now it's here.&#13;
&#13;
See you soon in the next coming post.。</description><guid isPermaLink="true">https://blog.quitw.org//post/Hello%20Gmeek%21.html</guid><pubDate>Wed, 23 Oct 2024 15:32:56 +0000</pubDate></item></channel></rss>